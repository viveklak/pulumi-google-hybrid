// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new Service in a given project and location.
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:run/v2:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Settings for the Binary Authorization feature.
     */
    public readonly binaryAuthorization!: pulumi.Output<outputs.run.v2.GoogleCloudRunV2BinaryAuthorizationResponse>;
    /**
     * Arbitrary identifier for the API client.
     */
    public readonly client!: pulumi.Output<string>;
    /**
     * Arbitrary version identifier for the API client.
     */
    public readonly clientVersion!: pulumi.Output<string>;
    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Service does not reach its Serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     */
    public /*out*/ readonly conditions!: pulumi.Output<outputs.run.v2.GoogleCloudRunV2ConditionResponse[]>;
    /**
     * The creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Email address of the authenticated creator.
     */
    public /*out*/ readonly creator!: pulumi.Output<string>;
    /**
     * The deletion time.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * For a deleted resource, the time after which it will be permamently deleted.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * A number that monotonically increases every time the user modifies the desired state.
     */
    public /*out*/ readonly generation!: pulumi.Output<string>;
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     */
    public readonly ingress!: pulumi.Output<string>;
    /**
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Email address of the last authenticated modifier.
     */
    public /*out*/ readonly lastModifier!: pulumi.Output<string>;
    /**
     * Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     */
    public /*out*/ readonly latestCreatedRevision!: pulumi.Output<string>;
    /**
     * Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     */
    public /*out*/ readonly latestReadyRevision!: pulumi.Output<string>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     */
    public readonly launchStage!: pulumi.Output<string>;
    /**
     * The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The generation of this Service currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     */
    public /*out*/ readonly observedGeneration!: pulumi.Output<string>;
    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`.
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The template used to create revisions for this Service.
     */
    public readonly template!: pulumi.Output<outputs.run.v2.GoogleCloudRunV2RevisionTemplateResponse>;
    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     */
    public /*out*/ readonly terminalCondition!: pulumi.Output<outputs.run.v2.GoogleCloudRunV2ConditionResponse>;
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     */
    public readonly traffic!: pulumi.Output<outputs.run.v2.GoogleCloudRunV2TrafficTargetResponse[]>;
    /**
     * Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.
     */
    public /*out*/ readonly trafficStatuses!: pulumi.Output<outputs.run.v2.GoogleCloudRunV2TrafficTargetStatusResponse[]>;
    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The last-modified time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The main URI in which this Service is serving traffic.
     */
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["binaryAuthorization"] = args ? args.binaryAuthorization : undefined;
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["clientVersion"] = args ? args.clientVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ingress"] = args ? args.ingress : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["launchStage"] = args ? args.launchStage : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["traffic"] = args ? args.traffic : undefined;
            resourceInputs["validateOnly"] = args ? args.validateOnly : undefined;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["lastModifier"] = undefined /*out*/;
            resourceInputs["latestCreatedRevision"] = undefined /*out*/;
            resourceInputs["latestReadyRevision"] = undefined /*out*/;
            resourceInputs["observedGeneration"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["terminalCondition"] = undefined /*out*/;
            resourceInputs["trafficStatuses"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        } else {
            resourceInputs["annotations"] = undefined /*out*/;
            resourceInputs["binaryAuthorization"] = undefined /*out*/;
            resourceInputs["client"] = undefined /*out*/;
            resourceInputs["clientVersion"] = undefined /*out*/;
            resourceInputs["conditions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["ingress"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["lastModifier"] = undefined /*out*/;
            resourceInputs["latestCreatedRevision"] = undefined /*out*/;
            resourceInputs["latestReadyRevision"] = undefined /*out*/;
            resourceInputs["launchStage"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["observedGeneration"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["template"] = undefined /*out*/;
            resourceInputs["terminalCondition"] = undefined /*out*/;
            resourceInputs["traffic"] = undefined /*out*/;
            resourceInputs["trafficStatuses"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: https://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Settings for the Binary Authorization feature.
     */
    binaryAuthorization?: pulumi.Input<inputs.run.v2.GoogleCloudRunV2BinaryAuthorizationArgs>;
    /**
     * Arbitrary identifier for the API client.
     */
    client?: pulumi.Input<string>;
    /**
     * Arbitrary version identifier for the API client.
     */
    clientVersion?: pulumi.Input<string>;
    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     */
    description?: pulumi.Input<string>;
    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     */
    ingress?: pulumi.Input<enums.run.v2.ServiceIngress>;
    /**
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed.
     */
    launchStage?: pulumi.Input<enums.run.v2.ServiceLaunchStage>;
    location?: pulumi.Input<string>;
    /**
     * The fully qualified name of this Service. In CreateServiceRequest, this field is ignored, and instead composed from CreateServiceRequest.parent and CreateServiceRequest.service_id. Format: projects/{project}/locations/{location}/services/{service_id}
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Required. The unique identifier for the Service. The name of the service becomes {parent}/services/{service_id}.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The template used to create revisions for this Service.
     */
    template: pulumi.Input<inputs.run.v2.GoogleCloudRunV2RevisionTemplateArgs>;
    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision.
     */
    traffic?: pulumi.Input<pulumi.Input<inputs.run.v2.GoogleCloudRunV2TrafficTargetArgs>[]>;
    /**
     * Indicates that the request should be validated and default values populated, without persisting the request or creating any resources.
     */
    validateOnly?: pulumi.Input<string>;
}
