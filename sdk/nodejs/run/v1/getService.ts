// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Get information about a service.
 */
export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:run/v1:getService", {
        "location": args.location,
        "project": args.project,
        "serviceId": args.serviceId,
    }, opts);
}

export interface GetServiceArgs {
    location: string;
    project?: string;
    serviceId: string;
}

export interface GetServiceResult {
    /**
     * The API version for this call such as "serving.knative.dev/v1".
     */
    readonly apiVersion: string;
    /**
     * The kind of resource, in this case "Service".
     */
    readonly kind: string;
    /**
     * Metadata associated with this Service, including name, namespace, labels, and annotations. Cloud Run (fully managed) uses the following annotation keys to configure features on a Service: * `run.googleapis.com/ingress` sets the ingress settings for the Service. See [the ingress settings documentation](/run/docs/securing/ingress) for details on configuring ingress settings. * `run.googleapis.com/ingress-status` is output-only and contains the currently active ingress settings for the Service. `run.googleapis.com/ingress-status` may differ from `run.googleapis.com/ingress` while the system is processing a change to `run.googleapis.com/ingress` or if the system failed to process a change to `run.googleapis.com/ingress`. When the system has processed all changes successfully `run.googleapis.com/ingress-status` and `run.googleapis.com/ingress` are equal.
     */
    readonly metadata: outputs.run.v1.ObjectMetaResponse;
    /**
     * Spec holds the desired state of the Service (from the client).
     */
    readonly spec: outputs.run.v1.ServiceSpecResponse;
    /**
     * Status communicates the observed state of the Service (from the controller).
     */
    readonly status: outputs.run.v1.ServiceStatusResponse;
}

export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply(a => getService(a, opts))
}

export interface GetServiceOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    serviceId: pulumi.Input<string>;
}
