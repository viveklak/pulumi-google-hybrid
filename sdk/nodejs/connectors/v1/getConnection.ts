// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Connection.
 */
export function getConnection(args: GetConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:connectors/v1:getConnection", {
        "connectionId": args.connectionId,
        "location": args.location,
        "project": args.project,
        "view": args.view,
    }, opts);
}

export interface GetConnectionArgs {
    connectionId: string;
    location: string;
    project?: string;
    view?: string;
}

export interface GetConnectionResult {
    /**
     * Optional. Configuration for establishing the connection's authentication with an external system.
     */
    readonly authConfig: outputs.connectors.v1.AuthConfigResponse;
    /**
     * Optional. Configuration for configuring the connection with an external system.
     */
    readonly configVariables: outputs.connectors.v1.ConfigVariableResponse[];
    /**
     * Connector version on which the connection is created. The format is: projects/*&#47;locations/global/providers/*&#47;connectors/*&#47;versions/*
     */
    readonly connectorVersion: string;
    /**
     * Created time.
     */
    readonly createTime: string;
    /**
     * Optional. Description of the resource.
     */
    readonly description: string;
    /**
     * Outbound domains/hosts needs to be allowlisted.
     */
    readonly egressBackends: string[];
    /**
     * GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     */
    readonly envoyImageLocation: string;
    /**
     * GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}
     */
    readonly imageLocation: string;
    /**
     * Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     */
    readonly labels: {[key: string]: string};
    /**
     * Optional. Configuration that indicates whether or not the Connection can be edited.
     */
    readonly lockConfig: outputs.connectors.v1.LockConfigResponse;
    /**
     * Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}
     */
    readonly name: string;
    /**
     * Optional. Service account needed for runtime plane to access GCP resources.
     */
    readonly serviceAccount: string;
    /**
     * The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. "projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors"
     */
    readonly serviceDirectory: string;
    /**
     * Current status of the connection.
     */
    readonly status: outputs.connectors.v1.ConnectionStatusResponse;
    /**
     * Optional. Suspended indicates if a user has suspended a connection or not.
     */
    readonly suspended: boolean;
    /**
     * Updated time.
     */
    readonly updateTime: string;
}

export function getConnectionOutput(args: GetConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectionResult> {
    return pulumi.output(args).apply(a => getConnection(a, opts))
}

export interface GetConnectionOutputArgs {
    connectionId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}
