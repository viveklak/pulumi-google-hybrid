// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns metadata for the specified bucket.
 */
export function getBucket(args: GetBucketArgs, opts?: pulumi.InvokeOptions): Promise<GetBucketResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:storage/v1:getBucket", {
        "bucket": args.bucket,
        "ifMetagenerationMatch": args.ifMetagenerationMatch,
        "ifMetagenerationNotMatch": args.ifMetagenerationNotMatch,
        "projection": args.projection,
        "provisionalUserProject": args.provisionalUserProject,
        "userProject": args.userProject,
    }, opts);
}

export interface GetBucketArgs {
    bucket: string;
    ifMetagenerationMatch?: string;
    ifMetagenerationNotMatch?: string;
    projection?: string;
    provisionalUserProject?: string;
    userProject?: string;
}

export interface GetBucketResult {
    /**
     * Access controls on the bucket.
     */
    readonly acl: outputs.storage.v1.BucketAccessControlResponse[];
    /**
     * The bucket's Autoclass configuration.
     */
    readonly autoclass: outputs.storage.v1.BucketAutoclassResponse;
    /**
     * The bucket's billing configuration.
     */
    readonly billing: outputs.storage.v1.BucketBillingResponse;
    /**
     * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
     */
    readonly cors: outputs.storage.v1.BucketCorsItemResponse[];
    /**
     * The bucket's custom placement configuration for Custom Dual Regions.
     */
    readonly customPlacementConfig: outputs.storage.v1.BucketCustomPlacementConfigResponse;
    /**
     * The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
     */
    readonly defaultEventBasedHold: boolean;
    /**
     * Default access controls to apply to new objects when no ACL is provided.
     */
    readonly defaultObjectAcl: outputs.storage.v1.ObjectAccessControlResponse[];
    /**
     * Encryption configuration for a bucket.
     */
    readonly encryption: outputs.storage.v1.BucketEncryptionResponse;
    /**
     * HTTP 1.1 Entity tag for the bucket.
     */
    readonly etag: string;
    /**
     * The bucket's IAM configuration.
     */
    readonly iamConfiguration: outputs.storage.v1.BucketIamConfigurationResponse;
    /**
     * The kind of item this is. For buckets, this is always storage#bucket.
     */
    readonly kind: string;
    /**
     * User-provided labels, in key/value pairs.
     */
    readonly labels: {[key: string]: string};
    /**
     * The bucket's lifecycle configuration. See lifecycle management for more information.
     */
    readonly lifecycle: outputs.storage.v1.BucketLifecycleResponse;
    /**
     * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
     */
    readonly location: string;
    /**
     * The type of the bucket location.
     */
    readonly locationType: string;
    /**
     * The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
     */
    readonly logging: outputs.storage.v1.BucketLoggingResponse;
    /**
     * The metadata generation of this bucket.
     */
    readonly metageneration: string;
    /**
     * The name of the bucket.
     */
    readonly name: string;
    /**
     * The owner of the bucket. This is always the project team's owner group.
     */
    readonly owner: outputs.storage.v1.BucketOwnerResponse;
    /**
     * The project number of the project the bucket belongs to.
     */
    readonly projectNumber: string;
    /**
     * The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     */
    readonly retentionPolicy: outputs.storage.v1.BucketRetentionPolicyResponse;
    /**
     * The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
     */
    readonly rpo: string;
    /**
     * Reserved for future use.
     */
    readonly satisfiesPZS: boolean;
    /**
     * The URI of this bucket.
     */
    readonly selfLink: string;
    /**
     * The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
     */
    readonly storageClass: string;
    /**
     * The creation time of the bucket in RFC 3339 format.
     */
    readonly timeCreated: string;
    /**
     * The modification time of the bucket in RFC 3339 format.
     */
    readonly updated: string;
    /**
     * The bucket's versioning configuration.
     */
    readonly versioning: outputs.storage.v1.BucketVersioningResponse;
    /**
     * The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
     */
    readonly website: outputs.storage.v1.BucketWebsiteResponse;
}

export function getBucketOutput(args: GetBucketOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBucketResult> {
    return pulumi.output(args).apply(a => getBucket(a, opts))
}

export interface GetBucketOutputArgs {
    bucket: pulumi.Input<string>;
    ifMetagenerationMatch?: pulumi.Input<string>;
    ifMetagenerationNotMatch?: pulumi.Input<string>;
    projection?: pulumi.Input<string>;
    provisionalUserProject?: pulumi.Input<string>;
    userProject?: pulumi.Input<string>;
}
