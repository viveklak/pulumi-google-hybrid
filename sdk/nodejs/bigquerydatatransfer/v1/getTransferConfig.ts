// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns information about a data transfer config.
 */
export function getTransferConfig(args: GetTransferConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetTransferConfigResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:bigquerydatatransfer/v1:getTransferConfig", {
        "location": args.location,
        "project": args.project,
        "transferConfigId": args.transferConfigId,
    }, opts);
}

export interface GetTransferConfigArgs {
    location: string;
    project?: string;
    transferConfigId: string;
}

export interface GetTransferConfigResult {
    /**
     * The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
     */
    readonly dataRefreshWindowDays: number;
    /**
     * Data source id. Cannot be changed once data transfer is created.
     */
    readonly dataSourceId: string;
    /**
     * Region in which BigQuery dataset is located.
     */
    readonly datasetRegion: string;
    /**
     * The BigQuery target dataset id.
     */
    readonly destinationDatasetId: string;
    /**
     * Is this config disabled. When set to true, no runs are scheduled for a given transfer.
     */
    readonly disabled: boolean;
    /**
     * User specified display name for the data transfer.
     */
    readonly displayName: string;
    /**
     * Email notifications will be sent according to these preferences to the email address of the user who owns this transfer config.
     */
    readonly emailPreferences: outputs.bigquerydatatransfer.v1.EmailPreferencesResponse;
    /**
     * The resource name of the transfer config. Transfer config names have the form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`. Where `config_id` is usually a uuid, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
     */
    readonly name: string;
    /**
     * Next time when data transfer will run.
     */
    readonly nextRunTime: string;
    /**
     * Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
     */
    readonly notificationPubsubTopic: string;
    /**
     * Information about the user whose credentials are used to transfer data. Populated only for `transferConfigs.get` requests. In case the user information is not available, this field will not be populated.
     */
    readonly ownerInfo: outputs.bigquerydatatransfer.v1.UserInfoResponse;
    /**
     * Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
     */
    readonly params: {[key: string]: string};
    /**
     * Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
     */
    readonly schedule: string;
    /**
     * Options customizing the data transfer schedule.
     */
    readonly scheduleOptions: outputs.bigquerydatatransfer.v1.ScheduleOptionsResponse;
    /**
     * State of the most recently updated transfer run.
     */
    readonly state: string;
    /**
     * Data transfer modification time. Ignored by server on input.
     */
    readonly updateTime: string;
    /**
     * Deprecated. Unique ID of the user on whose behalf transfer is done.
     *
     * @deprecated Deprecated. Unique ID of the user on whose behalf transfer is done.
     */
    readonly userId: string;
}

export function getTransferConfigOutput(args: GetTransferConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransferConfigResult> {
    return pulumi.output(args).apply(a => getTransferConfig(a, opts))
}

export interface GetTransferConfigOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    transferConfigId: pulumi.Input<string>;
}
