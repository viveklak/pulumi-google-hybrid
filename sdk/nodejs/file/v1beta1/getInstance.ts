// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the details of a specific instance.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:file/v1beta1:getInstance", {
        "instanceId": args.instanceId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetInstanceArgs {
    instanceId: string;
    location: string;
    project?: string;
}

export interface GetInstanceResult {
    /**
     * The time when the instance was created.
     */
    readonly createTime: string;
    /**
     * The description of the instance (2048 characters or less).
     */
    readonly description: string;
    /**
     * Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.
     */
    readonly etag: string;
    /**
     * File system shares on the instance. For this version, only a single file share is supported.
     */
    readonly fileShares: outputs.file.v1beta1.FileShareConfigResponse[];
    /**
     * KMS key name used for data encryption.
     */
    readonly kmsKeyName: string;
    /**
     * Resource labels to represent user provided metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * The max number of shares allowed.
     */
    readonly maxShareCount: string;
    /**
     * The resource name of the instance, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}`.
     */
    readonly name: string;
    /**
     * VPC networks to which the instance is connected. For this version, only a single network is supported.
     */
    readonly networks: outputs.file.v1beta1.NetworkConfigResponse[];
    /**
     * Reserved for future use.
     */
    readonly satisfiesPzs: boolean;
    /**
     * The instance state.
     */
    readonly state: string;
    /**
     * Additional information about the instance state, if available.
     */
    readonly statusMessage: string;
    /**
     * Field indicates all the reasons the instance is in "SUSPENDED" state.
     */
    readonly suspensionReasons: string[];
    /**
     * The service tier of the instance.
     */
    readonly tier: string;
}

export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply(a => getInstance(a, opts))
}

export interface GetInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
