// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns a CaPool.
 */
export function getCaPool(args: GetCaPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetCaPoolResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:privateca/v1:getCaPool", {
        "caPoolId": args.caPoolId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetCaPoolArgs {
    caPoolId: string;
    location: string;
    project?: string;
}

export interface GetCaPoolResult {
    /**
     * Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
     */
    readonly issuancePolicy: outputs.privateca.v1.IssuancePolicyResponse;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name for this CaPool in the format `projects/*&#47;locations/*&#47;caPools/*`.
     */
    readonly name: string;
    /**
     * Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
     */
    readonly publishingOptions: outputs.privateca.v1.PublishingOptionsResponse;
    /**
     * Immutable. The Tier of this CaPool.
     */
    readonly tier: string;
}

export function getCaPoolOutput(args: GetCaPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCaPoolResult> {
    return pulumi.output(args).apply(a => getCaPool(a, opts))
}

export interface GetCaPoolOutputArgs {
    caPoolId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
