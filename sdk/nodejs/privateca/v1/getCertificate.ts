// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns a Certificate.
 */
export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:privateca/v1:getCertificate", {
        "caPoolId": args.caPoolId,
        "certificateId": args.certificateId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetCertificateArgs {
    caPoolId: string;
    certificateId: string;
    location: string;
    project?: string;
}

export interface GetCertificateResult {
    /**
     * A structured description of the issued X.509 certificate.
     */
    readonly certificateDescription: outputs.privateca.v1.CertificateDescriptionResponse;
    /**
     * Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*&#47;locations/*&#47;certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
     */
    readonly certificateTemplate: string;
    /**
     * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     */
    readonly config: outputs.privateca.v1.CertificateConfigResponse;
    /**
     * The time at which this Certificate was created.
     */
    readonly createTime: string;
    /**
     * The resource name of the issuing CertificateAuthority in the format `projects/*&#47;locations/*&#47;caPools/*&#47;certificateAuthorities/*`.
     */
    readonly issuerCertificateAuthority: string;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     */
    readonly lifetime: string;
    /**
     * The resource name for this Certificate in the format `projects/*&#47;locations/*&#47;caPools/*&#47;certificates/*`.
     */
    readonly name: string;
    /**
     * The pem-encoded, signed X.509 certificate.
     */
    readonly pemCertificate: string;
    /**
     * The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
     */
    readonly pemCertificateChain: string[];
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    readonly pemCsr: string;
    /**
     * Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
     */
    readonly revocationDetails: outputs.privateca.v1.RevocationDetailsResponse;
    /**
     * Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
     */
    readonly subjectMode: string;
    /**
     * The time at which this Certificate was updated.
     */
    readonly updateTime: string;
}

export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateResult> {
    return pulumi.output(args).apply(a => getCertificate(a, opts))
}

export interface GetCertificateOutputArgs {
    caPoolId: pulumi.Input<string>;
    certificateId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
