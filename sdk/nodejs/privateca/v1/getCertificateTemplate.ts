// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns a CertificateTemplate.
 */
export function getCertificateTemplate(args: GetCertificateTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateTemplateResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:privateca/v1:getCertificateTemplate", {
        "certificateTemplateId": args.certificateTemplateId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetCertificateTemplateArgs {
    certificateTemplateId: string;
    location: string;
    project?: string;
}

export interface GetCertificateTemplateResult {
    /**
     * The time at which this CertificateTemplate was created.
     */
    readonly createTime: string;
    /**
     * Optional. A human-readable description of scenarios this template is intended for.
     */
    readonly description: string;
    /**
     * Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
     */
    readonly identityConstraints: outputs.privateca.v1.CertificateIdentityConstraintsResponse;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name for this CertificateTemplate in the format `projects/*&#47;locations/*&#47;certificateTemplates/*`.
     */
    readonly name: string;
    /**
     * Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
     */
    readonly passthroughExtensions: outputs.privateca.v1.CertificateExtensionConstraintsResponse;
    /**
     * Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
     */
    readonly predefinedValues: outputs.privateca.v1.X509ParametersResponse;
    /**
     * The time at which this CertificateTemplate was updated.
     */
    readonly updateTime: string;
}

export function getCertificateTemplateOutput(args: GetCertificateTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateTemplateResult> {
    return pulumi.output(args).apply(a => getCertificateTemplate(a, opts))
}

export interface GetCertificateTemplateOutputArgs {
    certificateTemplateId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
