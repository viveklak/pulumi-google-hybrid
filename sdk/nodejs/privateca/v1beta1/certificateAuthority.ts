// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a new CertificateAuthority in a given Project and Location.
 * Auto-naming is currently not supported for this resource.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 */
export class CertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CertificateAuthority {
        return new CertificateAuthority(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:privateca/v1beta1:CertificateAuthority';

    /**
     * Returns true if the given object is an instance of CertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateAuthority.__pulumiType;
    }

    /**
     * URLs for accessing content published by this CA, such as the CA certificate and CRLs.
     */
    public /*out*/ readonly accessUrls!: pulumi.Output<outputs.privateca.v1beta1.AccessUrlsResponse>;
    /**
     * A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
     */
    public /*out*/ readonly caCertificateDescriptions!: pulumi.Output<outputs.privateca.v1beta1.CertificateDescriptionResponse[]>;
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     */
    public readonly certificatePolicy!: pulumi.Output<outputs.privateca.v1beta1.CertificateAuthorityPolicyResponse>;
    /**
     * Immutable. The config used to create a self-signed X.509 certificate or CSR.
     */
    public readonly config!: pulumi.Output<outputs.privateca.v1beta1.CertificateConfigResponse>;
    /**
     * The time at which this CertificateAuthority was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time at which this CertificateAuthority will be deleted, if scheduled for deletion.
     */
    public /*out*/ readonly deleteTime!: pulumi.Output<string>;
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    public readonly gcsBucket!: pulumi.Output<string>;
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     */
    public readonly issuingOptions!: pulumi.Output<outputs.privateca.v1beta1.IssuingOptionsResponse>;
    /**
     * Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     */
    public readonly keySpec!: pulumi.Output<outputs.privateca.v1beta1.KeyVersionSpecResponse>;
    /**
     * Optional. Labels with user-defined metadata.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    public readonly lifetime!: pulumi.Output<string>;
    /**
     * The resource name for this CertificateAuthority in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
     */
    public /*out*/ readonly pemCaCertificates!: pulumi.Output<string[]>;
    /**
     * The State for this CertificateAuthority.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     */
    public readonly subordinateConfig!: pulumi.Output<outputs.privateca.v1beta1.SubordinateConfigResponse>;
    /**
     * Immutable. The Tier of this CertificateAuthority.
     */
    public readonly tier!: pulumi.Output<string>;
    /**
     * Immutable. The Type of this CertificateAuthority.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The time at which this CertificateAuthority was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.certificateAuthorityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.keySpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keySpec'");
            }
            if ((!args || args.lifetime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifetime'");
            }
            if ((!args || args.tier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tier'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["certificateAuthorityId"] = args ? args.certificateAuthorityId : undefined;
            resourceInputs["certificatePolicy"] = args ? args.certificatePolicy : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["gcsBucket"] = args ? args.gcsBucket : undefined;
            resourceInputs["issuingOptions"] = args ? args.issuingOptions : undefined;
            resourceInputs["keySpec"] = args ? args.keySpec : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lifetime"] = args ? args.lifetime : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["subordinateConfig"] = args ? args.subordinateConfig : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["accessUrls"] = undefined /*out*/;
            resourceInputs["caCertificateDescriptions"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pemCaCertificates"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["accessUrls"] = undefined /*out*/;
            resourceInputs["caCertificateDescriptions"] = undefined /*out*/;
            resourceInputs["certificatePolicy"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteTime"] = undefined /*out*/;
            resourceInputs["gcsBucket"] = undefined /*out*/;
            resourceInputs["issuingOptions"] = undefined /*out*/;
            resourceInputs["keySpec"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["lifetime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pemCaCertificates"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["subordinateConfig"] = undefined /*out*/;
            resourceInputs["tier"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateAuthority.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CertificateAuthority resource.
 */
export interface CertificateAuthorityArgs {
    /**
     * Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     */
    certificateAuthorityId: pulumi.Input<string>;
    /**
     * Optional. The CertificateAuthorityPolicy to enforce when issuing Certificates from this CertificateAuthority.
     */
    certificatePolicy?: pulumi.Input<inputs.privateca.v1beta1.CertificateAuthorityPolicyArgs>;
    /**
     * Immutable. The config used to create a self-signed X.509 certificate or CSR.
     */
    config: pulumi.Input<inputs.privateca.v1beta1.CertificateConfigArgs>;
    /**
     * Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
     */
    gcsBucket?: pulumi.Input<string>;
    /**
     * Optional. The IssuingOptions to follow when issuing Certificates from this CertificateAuthority.
     */
    issuingOptions?: pulumi.Input<inputs.privateca.v1beta1.IssuingOptionsArgs>;
    /**
     * Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.
     */
    keySpec: pulumi.Input<inputs.privateca.v1beta1.KeyVersionSpecArgs>;
    /**
     * Optional. Labels with user-defined metadata.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
     */
    lifetime: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.
     */
    subordinateConfig?: pulumi.Input<inputs.privateca.v1beta1.SubordinateConfigArgs>;
    /**
     * Immutable. The Tier of this CertificateAuthority.
     */
    tier: pulumi.Input<enums.privateca.v1beta1.CertificateAuthorityTier>;
    /**
     * Immutable. The Type of this CertificateAuthority.
     */
    type: pulumi.Input<enums.privateca.v1beta1.CertificateAuthorityType>;
}
