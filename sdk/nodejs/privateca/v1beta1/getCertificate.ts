// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns a Certificate.
 */
export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:privateca/v1beta1:getCertificate", {
        "certificateAuthorityId": args.certificateAuthorityId,
        "certificateId": args.certificateId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetCertificateArgs {
    certificateAuthorityId: string;
    certificateId: string;
    location: string;
    project?: string;
}

export interface GetCertificateResult {
    /**
     * A structured description of the issued X.509 certificate.
     */
    readonly certificateDescription: outputs.privateca.v1beta1.CertificateDescriptionResponse;
    /**
     * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
     */
    readonly config: outputs.privateca.v1beta1.CertificateConfigResponse;
    /**
     * The time at which this Certificate was created.
     */
    readonly createTime: string;
    /**
     * Optional. Labels with user-defined metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
     */
    readonly lifetime: string;
    /**
     * The resource path for this Certificate in the format `projects/*&#47;locations/*&#47;certificateAuthorities/*&#47;certificates/*`.
     */
    readonly name: string;
    /**
     * The pem-encoded, signed X.509 certificate.
     */
    readonly pemCertificate: string;
    /**
     * The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
     */
    readonly pemCertificateChain: string[];
    /**
     * Immutable. A pem-encoded X.509 certificate signing request (CSR).
     */
    readonly pemCsr: string;
    /**
     * Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
     */
    readonly revocationDetails: outputs.privateca.v1beta1.RevocationDetailsResponse;
    /**
     * The time at which this Certificate was updated.
     */
    readonly updateTime: string;
}

export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateResult> {
    return pulumi.output(args).apply(a => getCertificate(a, opts))
}

export interface GetCertificateOutputArgs {
    certificateAuthorityId: pulumi.Input<string>;
    certificateId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
