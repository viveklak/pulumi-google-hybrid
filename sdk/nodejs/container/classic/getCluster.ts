// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:container/classic:getCluster", {
        "location": args.location,
        "name": args.name,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    location?: string;
    name: string;
    project?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly addonsConfigs: outputs.container.getClusterAddonsConfig.GetClusterAddonsConfig[];
    readonly authenticatorGroupsConfigs: outputs.container.getClusterAuthenticatorGroupsConfig.GetClusterAuthenticatorGroupsConfig[];
    readonly clusterAutoscalings: outputs.container.getClusterClusterAutoscaling.GetClusterClusterAutoscaling[];
    readonly clusterIpv4Cidr: string;
    readonly clusterTelemetries: outputs.container.getClusterClusterTelemetry.GetClusterClusterTelemetry[];
    readonly confidentialNodes: outputs.container.getClusterConfidentialNode.GetClusterConfidentialNode[];
    readonly databaseEncryptions: outputs.container.getClusterDatabaseEncryption.GetClusterDatabaseEncryption[];
    readonly datapathProvider: string;
    readonly defaultMaxPodsPerNode: number;
    readonly defaultSnatStatuses: outputs.container.getClusterDefaultSnatStatus.GetClusterDefaultSnatStatus[];
    readonly description: string;
    readonly dnsConfigs: outputs.container.getClusterDnsConfig.GetClusterDnsConfig[];
    readonly enableAutopilot: boolean;
    readonly enableBinaryAuthorization: boolean;
    readonly enableIntranodeVisibility: boolean;
    readonly enableKubernetesAlpha: boolean;
    readonly enableL4IlbSubsetting: boolean;
    readonly enableLegacyAbac: boolean;
    readonly enableShieldedNodes: boolean;
    readonly enableTpu: boolean;
    readonly endpoint: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identityServiceConfigs: outputs.container.getClusterIdentityServiceConfig.GetClusterIdentityServiceConfig[];
    readonly initialNodeCount: number;
    readonly ipAllocationPolicies: outputs.container.getClusterIpAllocationPolicy.GetClusterIpAllocationPolicy[];
    readonly labelFingerprint: string;
    readonly location?: string;
    readonly loggingConfigs: outputs.container.getClusterLoggingConfig.GetClusterLoggingConfig[];
    readonly loggingService: string;
    readonly maintenancePolicies: outputs.container.getClusterMaintenancePolicy.GetClusterMaintenancePolicy[];
    readonly masterAuthorizedNetworksConfigs: outputs.container.getClusterMasterAuthorizedNetworksConfig.GetClusterMasterAuthorizedNetworksConfig[];
    readonly masterAuths: outputs.container.getClusterMasterAuth.GetClusterMasterAuth[];
    readonly masterVersion: string;
    readonly minMasterVersion: string;
    readonly monitoringConfigs: outputs.container.getClusterMonitoringConfig.GetClusterMonitoringConfig[];
    readonly monitoringService: string;
    readonly name: string;
    readonly network: string;
    readonly networkPolicies: outputs.container.getClusterNetworkPolicy.GetClusterNetworkPolicy[];
    readonly networkingMode: string;
    readonly nodeConfigs: outputs.container.getClusterNodeConfig.GetClusterNodeConfig[];
    readonly nodeLocations: string[];
    readonly nodePools: outputs.container.getClusterNodePool.GetClusterNodePool[];
    readonly nodeVersion: string;
    readonly notificationConfigs: outputs.container.getClusterNotificationConfig.GetClusterNotificationConfig[];
    readonly operation: string;
    readonly podSecurityPolicyConfigs: outputs.container.getClusterPodSecurityPolicyConfig.GetClusterPodSecurityPolicyConfig[];
    readonly privateClusterConfigs: outputs.container.getClusterPrivateClusterConfig.GetClusterPrivateClusterConfig[];
    readonly privateIpv6GoogleAccess: string;
    readonly project?: string;
    readonly releaseChannels: outputs.container.getClusterReleaseChannel.GetClusterReleaseChannel[];
    readonly removeDefaultNodePool: boolean;
    readonly resourceLabels: {[key: string]: string};
    readonly resourceUsageExportConfigs: outputs.container.getClusterResourceUsageExportConfig.GetClusterResourceUsageExportConfig[];
    readonly selfLink: string;
    readonly servicesIpv4Cidr: string;
    readonly subnetwork: string;
    readonly tpuIpv4CidrBlock: string;
    readonly verticalPodAutoscalings: outputs.container.getClusterVerticalPodAutoscaling.GetClusterVerticalPodAutoscaling[];
    readonly workloadIdentityConfigs: outputs.container.getClusterWorkloadIdentityConfig.GetClusterWorkloadIdentityConfig[];
}

export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply(a => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    location?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
