// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

export function getEngineVersions(args?: GetEngineVersionsArgs, opts?: pulumi.InvokeOptions): Promise<GetEngineVersionsResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:container/classic:getEngineVersions", {
        "location": args.location,
        "project": args.project,
        "versionPrefix": args.versionPrefix,
    }, opts);
}

/**
 * A collection of arguments for invoking getEngineVersions.
 */
export interface GetEngineVersionsArgs {
    location?: string;
    project?: string;
    versionPrefix?: string;
}

/**
 * A collection of values returned by getEngineVersions.
 */
export interface GetEngineVersionsResult {
    readonly defaultClusterVersion: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly latestMasterVersion: string;
    readonly latestNodeVersion: string;
    readonly location?: string;
    readonly project?: string;
    readonly releaseChannelDefaultVersion: {[key: string]: string};
    readonly validMasterVersions: string[];
    readonly validNodeVersions: string[];
    readonly versionPrefix?: string;
}

export function getEngineVersionsOutput(args?: GetEngineVersionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEngineVersionsResult> {
    return pulumi.output(args).apply(a => getEngineVersions(a, opts))
}

/**
 * A collection of arguments for invoking getEngineVersions.
 */
export interface GetEngineVersionsOutputArgs {
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    versionPrefix?: pulumi.Input<string>;
}
