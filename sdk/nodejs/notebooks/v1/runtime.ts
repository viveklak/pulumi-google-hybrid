// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new Runtime in a given project and location.
 * Auto-naming is currently not supported for this resource.
 */
export class Runtime extends pulumi.CustomResource {
    /**
     * Get an existing Runtime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Runtime {
        return new Runtime(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:notebooks/v1:Runtime';

    /**
     * Returns true if the given object is an instance of Runtime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Runtime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Runtime.__pulumiType;
    }

    /**
     * The config settings for accessing runtime.
     */
    public readonly accessConfig!: pulumi.Output<outputs.notebooks.v1.RuntimeAccessConfigResponse>;
    /**
     * Runtime creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Runtime health_state.
     */
    public /*out*/ readonly healthState!: pulumi.Output<string>;
    /**
     * Contains Runtime daemon metrics such as Service status and JupyterLab stats.
     */
    public /*out*/ readonly metrics!: pulumi.Output<outputs.notebooks.v1.RuntimeMetricsResponse>;
    /**
     * The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The config settings for software inside the runtime.
     */
    public readonly softwareConfig!: pulumi.Output<outputs.notebooks.v1.RuntimeSoftwareConfigResponse>;
    /**
     * Runtime state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Runtime update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     */
    public readonly virtualMachine!: pulumi.Output<outputs.notebooks.v1.VirtualMachineResponse>;

    /**
     * Create a Runtime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuntimeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.runtimeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeId'");
            }
            resourceInputs["accessConfig"] = args ? args.accessConfig : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["runtimeId"] = args ? args.runtimeId : undefined;
            resourceInputs["softwareConfig"] = args ? args.softwareConfig : undefined;
            resourceInputs["virtualMachine"] = args ? args.virtualMachine : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["healthState"] = undefined /*out*/;
            resourceInputs["metrics"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["accessConfig"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["healthState"] = undefined /*out*/;
            resourceInputs["metrics"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["softwareConfig"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["virtualMachine"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Runtime.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Runtime resource.
 */
export interface RuntimeArgs {
    /**
     * The config settings for accessing runtime.
     */
    accessConfig?: pulumi.Input<inputs.notebooks.v1.RuntimeAccessConfigArgs>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Idempotent request UUID.
     */
    requestId?: pulumi.Input<string>;
    /**
     * Required. User-defined unique ID of this Runtime.
     */
    runtimeId: pulumi.Input<string>;
    /**
     * The config settings for software inside the runtime.
     */
    softwareConfig?: pulumi.Input<inputs.notebooks.v1.RuntimeSoftwareConfigArgs>;
    /**
     * Use a Compute Engine VM image to start the managed notebook instance.
     */
    virtualMachine?: pulumi.Input<inputs.notebooks.v1.VirtualMachineArgs>;
}
