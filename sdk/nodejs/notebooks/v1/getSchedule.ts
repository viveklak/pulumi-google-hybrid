// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of schedule
 */
export function getSchedule(args: GetScheduleArgs, opts?: pulumi.InvokeOptions): Promise<GetScheduleResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:notebooks/v1:getSchedule", {
        "location": args.location,
        "project": args.project,
        "scheduleId": args.scheduleId,
    }, opts);
}

export interface GetScheduleArgs {
    location: string;
    project?: string;
    scheduleId: string;
}

export interface GetScheduleResult {
    /**
     * Time the schedule was created.
     */
    readonly createTime: string;
    /**
     * Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
     */
    readonly cronSchedule: string;
    /**
     * A brief description of this environment.
     */
    readonly description: string;
    /**
     * Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens '-', and underscores '_'.
     */
    readonly displayName: string;
    /**
     * Notebook Execution Template corresponding to this schedule.
     */
    readonly executionTemplate: outputs.notebooks.v1.ExecutionTemplateResponse;
    /**
     * The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
     */
    readonly name: string;
    /**
     * The most recent execution names triggered from this schedule and their corresponding states.
     */
    readonly recentExecutions: outputs.notebooks.v1.ExecutionResponse[];
    readonly state: string;
    /**
     * Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
     */
    readonly timeZone: string;
    /**
     * Time the schedule was last updated.
     */
    readonly updateTime: string;
}

export function getScheduleOutput(args: GetScheduleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetScheduleResult> {
    return pulumi.output(args).apply(a => getSchedule(a, opts))
}

export interface GetScheduleOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    scheduleId: pulumi.Input<string>;
}
