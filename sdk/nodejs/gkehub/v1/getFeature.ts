// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Feature.
 */
export function getFeature(args: GetFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:gkehub/v1:getFeature", {
        "featureId": args.featureId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetFeatureArgs {
    featureId: string;
    location: string;
    project?: string;
}

export interface GetFeatureResult {
    /**
     * When the Feature resource was created.
     */
    readonly createTime: string;
    /**
     * When the Feature resource was deleted.
     */
    readonly deleteTime: string;
    /**
     * GCP labels for this Feature.
     */
    readonly labels: {[key: string]: string};
    /**
     * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
     */
    readonly membershipSpecs: {[key: string]: string};
    /**
     * Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
     */
    readonly membershipStates: {[key: string]: string};
    /**
     * The full, unique name of this Feature resource in the format `projects/*&#47;locations/*&#47;features/*`.
     */
    readonly name: string;
    /**
     * State of the Feature resource itself.
     */
    readonly resourceState: outputs.gkehub.v1.FeatureResourceStateResponse;
    /**
     * Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
     */
    readonly spec: outputs.gkehub.v1.CommonFeatureSpecResponse;
    /**
     * The Hub-wide Feature state.
     */
    readonly state: outputs.gkehub.v1.CommonFeatureStateResponse;
    /**
     * When the Feature resource was last updated.
     */
    readonly updateTime: string;
}

export function getFeatureOutput(args: GetFeatureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeatureResult> {
    return pulumi.output(args).apply(a => getFeature(a, opts))
}

export interface GetFeatureOutputArgs {
    featureId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
