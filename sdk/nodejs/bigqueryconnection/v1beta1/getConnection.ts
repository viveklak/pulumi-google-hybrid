// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns specified connection.
 */
export function getConnection(args: GetConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:bigqueryconnection/v1beta1:getConnection", {
        "connectionId": args.connectionId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetConnectionArgs {
    connectionId: string;
    location: string;
    project?: string;
}

export interface GetConnectionResult {
    /**
     * Cloud SQL properties.
     */
    readonly cloudSql: outputs.bigqueryconnection.v1beta1.CloudSqlPropertiesResponse;
    /**
     * The creation timestamp of the connection.
     */
    readonly creationTime: string;
    /**
     * User provided description.
     */
    readonly description: string;
    /**
     * User provided display name for the connection.
     */
    readonly friendlyName: string;
    /**
     * True, if credential is configured for this connection.
     */
    readonly hasCredential: boolean;
    /**
     * The last update timestamp of the connection.
     */
    readonly lastModifiedTime: string;
    /**
     * The resource name of the connection in the form of: `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
     */
    readonly name: string;
}

export function getConnectionOutput(args: GetConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectionResult> {
    return pulumi.output(args).apply(a => getConnection(a, opts))
}

export interface GetConnectionOutputArgs {
    connectionId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
