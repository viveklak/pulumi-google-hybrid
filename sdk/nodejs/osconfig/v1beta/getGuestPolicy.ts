// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Get an OS Config guest policy.
 */
export function getGuestPolicy(args: GetGuestPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetGuestPolicyResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:osconfig/v1beta:getGuestPolicy", {
        "guestPolicyId": args.guestPolicyId,
        "project": args.project,
    }, opts);
}

export interface GetGuestPolicyArgs {
    guestPolicyId: string;
    project?: string;
}

export interface GetGuestPolicyResult {
    /**
     * Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
     */
    readonly assignment: outputs.osconfig.v1beta.AssignmentResponse;
    /**
     * Time this guest policy was created.
     */
    readonly createTime: string;
    /**
     * Description of the guest policy. Length of the description is limited to 1024 characters.
     */
    readonly description: string;
    /**
     * The etag for this guest policy. If this is provided on update, it must match the server's etag.
     */
    readonly etag: string;
    /**
     * Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
     */
    readonly name: string;
    /**
     * A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
     */
    readonly packageRepositories: outputs.osconfig.v1beta.PackageRepositoryResponse[];
    /**
     * The software packages to be managed by this policy.
     */
    readonly packages: outputs.osconfig.v1beta.PackageResponse[];
    /**
     * A list of Recipes to install on the VM instance.
     */
    readonly recipes: outputs.osconfig.v1beta.SoftwareRecipeResponse[];
    /**
     * Last time this guest policy was updated.
     */
    readonly updateTime: string;
}

export function getGuestPolicyOutput(args: GetGuestPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGuestPolicyResult> {
    return pulumi.output(args).apply(a => getGuestPolicy(a, opts))
}

export interface GetGuestPolicyOutputArgs {
    guestPolicyId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
