// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
 */
export class OsPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing OsPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OsPolicyAssignment {
        return new OsPolicyAssignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:osconfig/v1:OsPolicyAssignment';

    /**
     * Returns true if the given object is an instance of OsPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsPolicyAssignment.__pulumiType;
    }

    /**
     * Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.
     */
    public /*out*/ readonly baseline!: pulumi.Output<boolean>;
    /**
     * Indicates that this revision deletes the OS policy assignment.
     */
    public /*out*/ readonly deleted!: pulumi.Output<boolean>;
    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Filter to select VMs.
     */
    public readonly instanceFilter!: pulumi.Output<outputs.osconfig.v1.OSPolicyAssignmentInstanceFilterResponse>;
    /**
     * Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of OS policies to be applied to the VMs.
     */
    public readonly osPolicies!: pulumi.Output<outputs.osconfig.v1.OSPolicyResponse[]>;
    /**
     * Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING
     */
    public /*out*/ readonly reconciling!: pulumi.Output<boolean>;
    /**
     * The timestamp that the revision was created.
     */
    public /*out*/ readonly revisionCreateTime!: pulumi.Output<string>;
    /**
     * The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
     */
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    /**
     * Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     */
    public readonly rollout!: pulumi.Output<outputs.osconfig.v1.OSPolicyAssignmentRolloutResponse>;
    /**
     * OS policy assignment rollout state
     */
    public /*out*/ readonly rolloutState!: pulumi.Output<string>;
    /**
     * Server generated unique id for the OS policy assignment resource.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a OsPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instanceFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceFilter'");
            }
            if ((!args || args.osPolicies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osPolicies'");
            }
            if ((!args || args.osPolicyAssignmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osPolicyAssignmentId'");
            }
            if ((!args || args.rollout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rollout'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["instanceFilter"] = args ? args.instanceFilter : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osPolicies"] = args ? args.osPolicies : undefined;
            resourceInputs["osPolicyAssignmentId"] = args ? args.osPolicyAssignmentId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rollout"] = args ? args.rollout : undefined;
            resourceInputs["baseline"] = undefined /*out*/;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["revisionCreateTime"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["rolloutState"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        } else {
            resourceInputs["baseline"] = undefined /*out*/;
            resourceInputs["deleted"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["instanceFilter"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["osPolicies"] = undefined /*out*/;
            resourceInputs["reconciling"] = undefined /*out*/;
            resourceInputs["revisionCreateTime"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["rollout"] = undefined /*out*/;
            resourceInputs["rolloutState"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsPolicyAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a OsPolicyAssignment resource.
 */
export interface OsPolicyAssignmentArgs {
    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
     */
    etag?: pulumi.Input<string>;
    /**
     * Filter to select VMs.
     */
    instanceFilter: pulumi.Input<inputs.osconfig.v1.OSPolicyAssignmentInstanceFilterArgs>;
    location?: pulumi.Input<string>;
    /**
     * Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
     */
    name?: pulumi.Input<string>;
    /**
     * List of OS policies to be applied to the VMs.
     */
    osPolicies: pulumi.Input<pulumi.Input<inputs.osconfig.v1.OSPolicyArgs>[]>;
    /**
     * Required. The logical name of the OS policy assignment in the project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project.
     */
    osPolicyAssignmentId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     */
    rollout: pulumi.Input<inputs.osconfig.v1.OSPolicyAssignmentRolloutArgs>;
}
