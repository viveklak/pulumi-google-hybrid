// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Retrieve an existing OS policy assignment. This method always returns the latest revision. In order to retrieve a previous revision of the assignment, also provide the revision ID in the `name` parameter.
 */
export function getOsPolicyAssignment(args: GetOsPolicyAssignmentArgs, opts?: pulumi.InvokeOptions): Promise<GetOsPolicyAssignmentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:osconfig/v1:getOsPolicyAssignment", {
        "location": args.location,
        "osPolicyAssignmentId": args.osPolicyAssignmentId,
        "project": args.project,
    }, opts);
}

export interface GetOsPolicyAssignmentArgs {
    location: string;
    osPolicyAssignmentId: string;
    project?: string;
}

export interface GetOsPolicyAssignmentResult {
    /**
     * Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.
     */
    readonly baseline: boolean;
    /**
     * Indicates that this revision deletes the OS policy assignment.
     */
    readonly deleted: boolean;
    /**
     * OS policy assignment description. Length of the description is limited to 1024 characters.
     */
    readonly description: string;
    /**
     * The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.
     */
    readonly etag: string;
    /**
     * Filter to select VMs.
     */
    readonly instanceFilter: outputs.osconfig.v1.OSPolicyAssignmentInstanceFilterResponse;
    /**
     * Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.
     */
    readonly name: string;
    /**
     * List of OS policies to be applied to the VMs.
     */
    readonly osPolicies: outputs.osconfig.v1.OSPolicyResponse[];
    /**
     * Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING
     */
    readonly reconciling: boolean;
    /**
     * The timestamp that the revision was created.
     */
    readonly revisionCreateTime: string;
    /**
     * The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment
     */
    readonly revisionId: string;
    /**
     * Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.
     */
    readonly rollout: outputs.osconfig.v1.OSPolicyAssignmentRolloutResponse;
    /**
     * OS policy assignment rollout state
     */
    readonly rolloutState: string;
    /**
     * Server generated unique id for the OS policy assignment resource.
     */
    readonly uid: string;
}

export function getOsPolicyAssignmentOutput(args: GetOsPolicyAssignmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOsPolicyAssignmentResult> {
    return pulumi.output(args).apply(a => getOsPolicyAssignment(a, opts))
}

export interface GetOsPolicyAssignmentOutputArgs {
    location: pulumi.Input<string>;
    osPolicyAssignmentId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
