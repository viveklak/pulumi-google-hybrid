// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Get an OS Config patch deployment.
 */
export function getPatchDeployment(args: GetPatchDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetPatchDeploymentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:osconfig/v1:getPatchDeployment", {
        "patchDeploymentId": args.patchDeploymentId,
        "project": args.project,
    }, opts);
}

export interface GetPatchDeploymentArgs {
    patchDeploymentId: string;
    project?: string;
}

export interface GetPatchDeploymentResult {
    /**
     * Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     */
    readonly createTime: string;
    /**
     * Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.
     */
    readonly description: string;
    /**
     * Optional. Duration of the patch. After the duration ends, the patch times out.
     */
    readonly duration: string;
    /**
     * VM instances to patch.
     */
    readonly instanceFilter: outputs.osconfig.v1.PatchInstanceFilterResponse;
    /**
     * The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     */
    readonly lastExecuteTime: string;
    /**
     * Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.
     */
    readonly name: string;
    /**
     * Schedule a one-time execution.
     */
    readonly oneTimeSchedule: outputs.osconfig.v1.OneTimeScheduleResponse;
    /**
     * Optional. Patch configuration that is applied.
     */
    readonly patchConfig: outputs.osconfig.v1.PatchConfigResponse;
    /**
     * Schedule recurring executions.
     */
    readonly recurringSchedule: outputs.osconfig.v1.RecurringScheduleResponse;
    /**
     * Optional. Rollout strategy of the patch job.
     */
    readonly rollout: outputs.osconfig.v1.PatchRolloutResponse;
    /**
     * Current state of the patch deployment.
     */
    readonly state: string;
    /**
     * Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
     */
    readonly updateTime: string;
}

export function getPatchDeploymentOutput(args: GetPatchDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPatchDeploymentResult> {
    return pulumi.output(args).apply(a => getPatchDeployment(a, opts))
}

export interface GetPatchDeploymentOutputArgs {
    patchDeploymentId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
