// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Retrieves a zone resource.
 */
export function getZone(args: GetZoneArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:dataplex/v1:getZone", {
        "lakeId": args.lakeId,
        "location": args.location,
        "project": args.project,
        "zone": args.zone,
    }, opts);
}

export interface GetZoneArgs {
    lakeId: string;
    location: string;
    project?: string;
    zone: string;
}

export interface GetZoneResult {
    /**
     * Aggregated status of the underlying assets of the zone.
     */
    readonly assetStatus: outputs.dataplex.v1.GoogleCloudDataplexV1AssetStatusResponse;
    /**
     * The time when the zone was created.
     */
    readonly createTime: string;
    /**
     * Optional. Description of the zone.
     */
    readonly description: string;
    /**
     * Optional. Specification of the discovery feature applied to data in this zone.
     */
    readonly discoverySpec: outputs.dataplex.v1.GoogleCloudDataplexV1ZoneDiscoverySpecResponse;
    /**
     * Optional. User friendly display name.
     */
    readonly displayName: string;
    /**
     * Optional. User defined labels for the zone.
     */
    readonly labels: {[key: string]: string};
    /**
     * The relative resource name of the zone, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}.
     */
    readonly name: string;
    /**
     * Specification of the resources that are referenced by the assets within this zone.
     */
    readonly resourceSpec: outputs.dataplex.v1.GoogleCloudDataplexV1ZoneResourceSpecResponse;
    /**
     * Current state of the zone.
     */
    readonly state: string;
    /**
     * Immutable. The type of the zone.
     */
    readonly type: string;
    /**
     * System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.
     */
    readonly uid: string;
    /**
     * The time when the zone was last updated.
     */
    readonly updateTime: string;
}

export function getZoneOutput(args: GetZoneOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetZoneResult> {
    return pulumi.output(args).apply(a => getZone(a, opts))
}

export interface GetZoneOutputArgs {
    lakeId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
