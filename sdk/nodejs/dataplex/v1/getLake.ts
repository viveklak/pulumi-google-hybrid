// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Retrieves a lake resource.
 */
export function getLake(args: GetLakeArgs, opts?: pulumi.InvokeOptions): Promise<GetLakeResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:dataplex/v1:getLake", {
        "lakeId": args.lakeId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetLakeArgs {
    lakeId: string;
    location: string;
    project?: string;
}

export interface GetLakeResult {
    /**
     * Aggregated status of the underlying assets of the lake.
     */
    readonly assetStatus: outputs.dataplex.v1.GoogleCloudDataplexV1AssetStatusResponse;
    /**
     * The time when the lake was created.
     */
    readonly createTime: string;
    /**
     * Optional. Description of the lake.
     */
    readonly description: string;
    /**
     * Optional. User friendly display name.
     */
    readonly displayName: string;
    /**
     * Optional. User-defined labels for the lake.
     */
    readonly labels: {[key: string]: string};
    /**
     * Optional. Settings to manage lake and Dataproc Metastore service instance association.
     */
    readonly metastore: outputs.dataplex.v1.GoogleCloudDataplexV1LakeMetastoreResponse;
    /**
     * Metastore status of the lake.
     */
    readonly metastoreStatus: outputs.dataplex.v1.GoogleCloudDataplexV1LakeMetastoreStatusResponse;
    /**
     * The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
     */
    readonly name: string;
    /**
     * Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
     */
    readonly serviceAccount: string;
    /**
     * Current state of the lake.
     */
    readonly state: string;
    /**
     * System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
     */
    readonly uid: string;
    /**
     * The time when the lake was last updated.
     */
    readonly updateTime: string;
}

export function getLakeOutput(args: GetLakeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLakeResult> {
    return pulumi.output(args).apply(a => getLake(a, opts))
}

export interface GetLakeOutputArgs {
    lakeId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
