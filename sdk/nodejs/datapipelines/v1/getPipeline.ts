// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Looks up a single pipeline. Returns a "NOT_FOUND" error if no such pipeline exists. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it.
 */
export function getPipeline(args: GetPipelineArgs, opts?: pulumi.InvokeOptions): Promise<GetPipelineResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:datapipelines/v1:getPipeline", {
        "location": args.location,
        "pipelineId": args.pipelineId,
        "project": args.project,
    }, opts);
}

export interface GetPipelineArgs {
    location: string;
    pipelineId: string;
    project?: string;
}

export interface GetPipelineResult {
    /**
     * Immutable. The timestamp when the pipeline was initially created. Set by the Data Pipelines service.
     */
    readonly createTime: string;
    /**
     * The display name of the pipeline. It can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), and underscores (_).
     */
    readonly displayName: string;
    /**
     * Number of jobs.
     */
    readonly jobCount: number;
    /**
     * Immutable. The timestamp when the pipeline was last modified. Set by the Data Pipelines service.
     */
    readonly lastUpdateTime: string;
    /**
     * The pipeline name. For example: `projects/PROJECT_ID/locations/LOCATION_ID/pipelines/PIPELINE_ID`. * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), and periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects). * `LOCATION_ID` is the canonical ID for the pipeline's location. The list of available locations can be obtained by calling `google.cloud.location.Locations.ListLocations`. Note that the Data Pipelines service is not available in all regions. It depends on Cloud Scheduler, an App Engine application, so it's only available in [App Engine regions](https://cloud.google.com/about/locations#region). * `PIPELINE_ID` is the ID of the pipeline. Must be unique for the selected project and location.
     */
    readonly name: string;
    /**
     * Immutable. The sources of the pipeline (for example, Dataplex). The keys and values are set by the corresponding sources during pipeline creation.
     */
    readonly pipelineSources: {[key: string]: string};
    /**
     * Internal scheduling information for a pipeline. If this information is provided, periodic jobs will be created per the schedule. If not, users are responsible for creating jobs externally.
     */
    readonly scheduleInfo: outputs.datapipelines.v1.GoogleCloudDatapipelinesV1ScheduleSpecResponse;
    /**
     * Optional. A service account email to be used with the Cloud Scheduler job. If not specified, the default compute engine service account will be used.
     */
    readonly schedulerServiceAccountEmail: string;
    /**
     * The state of the pipeline. When the pipeline is created, the state is set to 'PIPELINE_STATE_ACTIVE' by default. State changes can be requested by setting the state to stopping, paused, or resuming. State cannot be changed through UpdatePipeline requests.
     */
    readonly state: string;
    /**
     * The type of the pipeline. This field affects the scheduling of the pipeline and the type of metrics to show for the pipeline.
     */
    readonly type: string;
    /**
     * Workload information for creating new jobs.
     */
    readonly workload: outputs.datapipelines.v1.GoogleCloudDatapipelinesV1WorkloadResponse;
}

export function getPipelineOutput(args: GetPipelineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPipelineResult> {
    return pulumi.output(args).apply(a => getPipeline(a, opts))
}

export interface GetPipelineOutputArgs {
    location: pulumi.Input<string>;
    pipelineId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
