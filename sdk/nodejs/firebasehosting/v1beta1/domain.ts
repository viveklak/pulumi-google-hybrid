// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a domain mapping on the specified site.
 * Auto-naming is currently not supported for this resource.
 */
export class Domain extends pulumi.CustomResource {
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Domain {
        return new Domain(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:firebasehosting/v1beta1:Domain';

    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Domain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }

    /**
     * The domain name of the association.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * If set, the domain should redirect with the provided parameters.
     */
    public readonly domainRedirect!: pulumi.Output<outputs.firebasehosting.v1beta1.DomainRedirectResponse>;
    /**
     * Information about the provisioning of certificates and the health of the DNS resolution for the domain.
     */
    public /*out*/ readonly provisioning!: pulumi.Output<outputs.firebasehosting.v1beta1.DomainProvisioningResponse>;
    /**
     * The site name of the association.
     */
    public readonly site!: pulumi.Output<string>;
    /**
     * Additional status of the domain association.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The time at which the domain was last updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Domain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.site === undefined) && !opts.urn) {
                throw new Error("Missing required property 'site'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainRedirect"] = args ? args.domainRedirect : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["provisioning"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["domainRedirect"] = undefined /*out*/;
            resourceInputs["provisioning"] = undefined /*out*/;
            resourceInputs["site"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Domain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Domain resource.
 */
export interface DomainArgs {
    /**
     * The domain name of the association.
     */
    domainName: pulumi.Input<string>;
    /**
     * If set, the domain should redirect with the provided parameters.
     */
    domainRedirect?: pulumi.Input<inputs.firebasehosting.v1beta1.DomainRedirectArgs>;
    project?: pulumi.Input<string>;
    /**
     * The site name of the association.
     */
    site: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
}
