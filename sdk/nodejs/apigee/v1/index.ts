// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./alias";
export * from "./api";
export * from "./apiProduct";
export * from "./app";
export * from "./archiveDeployment";
export * from "./canaryEvaluation";
export * from "./dataCollector";
export * from "./datastore";
export * from "./debugSession";
export * from "./developer";
export * from "./endpointAttachment";
export * from "./envgroup";
export * from "./envgroupAttachment";
export * from "./environment";
export * from "./export";
export * from "./getAlias";
export * from "./getApi";
export * from "./getApiProduct";
export * from "./getApicategory";
export * from "./getApp";
export * from "./getArchiveDeployment";
export * from "./getCanaryEvaluation";
export * from "./getDataCollector";
export * from "./getDatastore";
export * from "./getDebugSession";
export * from "./getDeveloper";
export * from "./getEndpointAttachment";
export * from "./getEnvgroup";
export * from "./getEnvgroupAttachment";
export * from "./getEnvironment";
export * from "./getExport";
export * from "./getHostQuery";
export * from "./getInstance";
export * from "./getInstanceAttachment";
export * from "./getKey";
export * from "./getKeystore";
export * from "./getNatAddress";
export * from "./getOrganization";
export * from "./getOrganizationEnvironmentIamPolicy";
export * from "./getOverride";
export * from "./getQuery";
export * from "./getRatePlan";
export * from "./getReference";
export * from "./getReport";
export * from "./getResourcefile";
export * from "./getSharedflow";
export * from "./getSubscription";
export * from "./getTargetServer";
export * from "./hostQuery";
export * from "./instance";
export * from "./instanceAttachment";
export * from "./keystore";
export * from "./natAddress";
export * from "./organization";
export * from "./organizationEnvironmentIamPolicy";
export * from "./override";
export * from "./query";
export * from "./ratePlan";
export * from "./reference";
export * from "./report";
export * from "./resourcefile";
export * from "./sharedflow";
export * from "./subscription";
export * from "./targetServer";

// Export enums:
export * from "../../types/enums/apigee/v1";

// Import resources to register:
import { Alias } from "./alias";
import { Api } from "./api";
import { ApiProduct } from "./apiProduct";
import { App } from "./app";
import { ArchiveDeployment } from "./archiveDeployment";
import { CanaryEvaluation } from "./canaryEvaluation";
import { DataCollector } from "./dataCollector";
import { Datastore } from "./datastore";
import { DebugSession } from "./debugSession";
import { Developer } from "./developer";
import { EndpointAttachment } from "./endpointAttachment";
import { Envgroup } from "./envgroup";
import { EnvgroupAttachment } from "./envgroupAttachment";
import { Environment } from "./environment";
import { Export } from "./export";
import { HostQuery } from "./hostQuery";
import { Instance } from "./instance";
import { InstanceAttachment } from "./instanceAttachment";
import { Keystore } from "./keystore";
import { NatAddress } from "./natAddress";
import { Organization } from "./organization";
import { OrganizationEnvironmentIamPolicy } from "./organizationEnvironmentIamPolicy";
import { Override } from "./override";
import { Query } from "./query";
import { RatePlan } from "./ratePlan";
import { Reference } from "./reference";
import { Report } from "./report";
import { Resourcefile } from "./resourcefile";
import { Sharedflow } from "./sharedflow";
import { Subscription } from "./subscription";
import { TargetServer } from "./targetServer";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-hybrid:apigee/v1:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Api":
                return new Api(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:ApiProduct":
                return new ApiProduct(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:App":
                return new App(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:ArchiveDeployment":
                return new ArchiveDeployment(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:CanaryEvaluation":
                return new CanaryEvaluation(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:DataCollector":
                return new DataCollector(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Datastore":
                return new Datastore(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:DebugSession":
                return new DebugSession(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Developer":
                return new Developer(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:EndpointAttachment":
                return new EndpointAttachment(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Envgroup":
                return new Envgroup(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:EnvgroupAttachment":
                return new EnvgroupAttachment(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Export":
                return new Export(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:HostQuery":
                return new HostQuery(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:InstanceAttachment":
                return new InstanceAttachment(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Keystore":
                return new Keystore(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:NatAddress":
                return new NatAddress(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:OrganizationEnvironmentIamPolicy":
                return new OrganizationEnvironmentIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Override":
                return new Override(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Query":
                return new Query(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:RatePlan":
                return new RatePlan(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Reference":
                return new Reference(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Report":
                return new Report(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Resourcefile":
                return new Resourcefile(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Sharedflow":
                return new Sharedflow(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "google-hybrid:apigee/v1:TargetServer":
                return new TargetServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-hybrid", "apigee/v1", _module)
