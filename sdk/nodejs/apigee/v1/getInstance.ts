// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets the details for an Apigee runtime instance. **Note:** Not supported for Apigee hybrid.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:apigee/v1:getInstance", {
        "instanceId": args.instanceId,
        "organizationId": args.organizationId,
    }, opts);
}

export interface GetInstanceArgs {
    instanceId: string;
    organizationId: string;
}

export interface GetInstanceResult {
    /**
     * Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.
     */
    readonly consumerAcceptList: string[];
    /**
     * Time the instance was created in milliseconds since epoch.
     */
    readonly createdAt: string;
    /**
     * Optional. Description of the instance.
     */
    readonly description: string;
    /**
     * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     */
    readonly diskEncryptionKeyName: string;
    /**
     * Optional. Display name for the instance.
     */
    readonly displayName: string;
    /**
     * Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.
     */
    readonly host: string;
    /**
     * Optional. IP range represents the customer-provided CIDR block of length 22 that will be used for the Apigee instance creation. This optional range, if provided, should be freely available as part of larger named range the customer has allocated to the Service Networking peering. If this is not provided, Apigee will automatically request for any available /22 CIDR block from Service Networking. The customer should use this CIDR block for configuring their firewall needs to allow traffic from Apigee. Input format: "a.b.c.d/22", Output format: a.b.c.d/22, e.f.g.h/28"
     */
    readonly ipRange: string;
    /**
     * Time the instance was last modified in milliseconds since epoch.
     */
    readonly lastModifiedAt: string;
    /**
     * Compute Engine location where the instance resides.
     */
    readonly location: string;
    /**
     * Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\d]$`.
     */
    readonly name: string;
    /**
     * Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.
     */
    readonly peeringCidrRange: string;
    /**
     * Port number of the exposed Apigee endpoint.
     */
    readonly port: string;
    /**
     * Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.
     */
    readonly runtimeVersion: string;
    /**
     * Resource name of the service attachment created for the instance in the format: `projects/*&#47;regions/*&#47;serviceAttachments/*` Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.
     */
    readonly serviceAttachment: string;
    /**
     * State of the instance. Values other than `ACTIVE` means the resource is not ready to use.
     */
    readonly state: string;
}

export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply(a => getInstance(a, opts))
}

export interface GetInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
}
