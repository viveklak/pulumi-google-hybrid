// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer's perspective, they purchase API products not rate plans.
 * Auto-naming is currently not supported for this resource.
 */
export class RatePlan extends pulumi.CustomResource {
    /**
     * Get an existing RatePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RatePlan {
        return new RatePlan(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:apigee/v1:RatePlan';

    /**
     * Returns true if the given object is an instance of RatePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RatePlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RatePlan.__pulumiType;
    }

    /**
     * Name of the API product that the rate plan is associated with.
     */
    public readonly apiproduct!: pulumi.Output<string>;
    /**
     * Frequency at which the customer will be billed.
     */
    public readonly billingPeriod!: pulumi.Output<string>;
    /**
     * API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { "start": 1, "end": 100, "fee": 75 }, { "start": 101, "end": 200, "fee": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.
     */
    public readonly consumptionPricingRates!: pulumi.Output<outputs.apigee.v1.GoogleCloudApigeeV1RateRangeResponse[]>;
    /**
     * Pricing model used for consumption-based charges.
     */
    public readonly consumptionPricingType!: pulumi.Output<string>;
    /**
     * Time that the rate plan was created in milliseconds since epoch.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.
     */
    public readonly currencyCode!: pulumi.Output<string>;
    /**
     * Description of the rate plan.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Display name of the rate plan.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * Frequency at which the fixed fee is charged.
     */
    public readonly fixedFeeFrequency!: pulumi.Output<number>;
    /**
     * Fixed amount that is charged at a defined interval and billed in advance of use of the API product. The fee will be prorated for the first billing period.
     */
    public readonly fixedRecurringFee!: pulumi.Output<outputs.apigee.v1.GoogleTypeMoneyResponse>;
    /**
     * Time the rate plan was last modified in milliseconds since epoch.
     */
    public /*out*/ readonly lastModifiedAt!: pulumi.Output<string>;
    /**
     * Name of the rate plan.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.
     *
     * @deprecated DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.
     */
    public readonly paymentFundingModel!: pulumi.Output<string>;
    /**
     * Details of the revenue sharing model.
     */
    public readonly revenueShareRates!: pulumi.Output<outputs.apigee.v1.GoogleCloudApigeeV1RevenueShareRangeResponse[]>;
    /**
     * Method used to calculate the revenue that is shared with developers.
     */
    public readonly revenueShareType!: pulumi.Output<string>;
    /**
     * Initial, one-time fee paid when purchasing the API product.
     */
    public readonly setupFee!: pulumi.Output<outputs.apigee.v1.GoogleTypeMoneyResponse>;
    /**
     * Time when the rate plan becomes active in milliseconds since epoch.
     */
    public readonly startTime!: pulumi.Output<string>;
    /**
     * Current state of the rate plan (draft or published).
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a RatePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RatePlanArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiproductId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiproductId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["apiproduct"] = args ? args.apiproduct : undefined;
            resourceInputs["apiproductId"] = args ? args.apiproductId : undefined;
            resourceInputs["billingPeriod"] = args ? args.billingPeriod : undefined;
            resourceInputs["consumptionPricingRates"] = args ? args.consumptionPricingRates : undefined;
            resourceInputs["consumptionPricingType"] = args ? args.consumptionPricingType : undefined;
            resourceInputs["currencyCode"] = args ? args.currencyCode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["fixedFeeFrequency"] = args ? args.fixedFeeFrequency : undefined;
            resourceInputs["fixedRecurringFee"] = args ? args.fixedRecurringFee : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["paymentFundingModel"] = args ? args.paymentFundingModel : undefined;
            resourceInputs["revenueShareRates"] = args ? args.revenueShareRates : undefined;
            resourceInputs["revenueShareType"] = args ? args.revenueShareType : undefined;
            resourceInputs["setupFee"] = args ? args.setupFee : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        } else {
            resourceInputs["apiproduct"] = undefined /*out*/;
            resourceInputs["billingPeriod"] = undefined /*out*/;
            resourceInputs["consumptionPricingRates"] = undefined /*out*/;
            resourceInputs["consumptionPricingType"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["currencyCode"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["fixedFeeFrequency"] = undefined /*out*/;
            resourceInputs["fixedRecurringFee"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["paymentFundingModel"] = undefined /*out*/;
            resourceInputs["revenueShareRates"] = undefined /*out*/;
            resourceInputs["revenueShareType"] = undefined /*out*/;
            resourceInputs["setupFee"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RatePlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RatePlan resource.
 */
export interface RatePlanArgs {
    /**
     * Name of the API product that the rate plan is associated with.
     */
    apiproduct?: pulumi.Input<string>;
    apiproductId: pulumi.Input<string>;
    /**
     * Frequency at which the customer will be billed.
     */
    billingPeriod?: pulumi.Input<enums.apigee.v1.RatePlanBillingPeriod>;
    /**
     * API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { "start": 1, "end": 100, "fee": 75 }, { "start": 101, "end": 200, "fee": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.
     */
    consumptionPricingRates?: pulumi.Input<pulumi.Input<inputs.apigee.v1.GoogleCloudApigeeV1RateRangeArgs>[]>;
    /**
     * Pricing model used for consumption-based charges.
     */
    consumptionPricingType?: pulumi.Input<enums.apigee.v1.RatePlanConsumptionPricingType>;
    /**
     * Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.
     */
    currencyCode?: pulumi.Input<string>;
    /**
     * Description of the rate plan.
     */
    description?: pulumi.Input<string>;
    /**
     * Display name of the rate plan.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Frequency at which the fixed fee is charged.
     */
    fixedFeeFrequency?: pulumi.Input<number>;
    /**
     * Fixed amount that is charged at a defined interval and billed in advance of use of the API product. The fee will be prorated for the first billing period.
     */
    fixedRecurringFee?: pulumi.Input<inputs.apigee.v1.GoogleTypeMoneyArgs>;
    organizationId: pulumi.Input<string>;
    /**
     * DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.
     *
     * @deprecated DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.
     */
    paymentFundingModel?: pulumi.Input<enums.apigee.v1.RatePlanPaymentFundingModel>;
    /**
     * Details of the revenue sharing model.
     */
    revenueShareRates?: pulumi.Input<pulumi.Input<inputs.apigee.v1.GoogleCloudApigeeV1RevenueShareRangeArgs>[]>;
    /**
     * Method used to calculate the revenue that is shared with developers.
     */
    revenueShareType?: pulumi.Input<enums.apigee.v1.RatePlanRevenueShareType>;
    /**
     * Initial, one-time fee paid when purchasing the API product.
     */
    setupFee?: pulumi.Input<inputs.apigee.v1.GoogleTypeMoneyArgs>;
    /**
     * Time when the rate plan becomes active in milliseconds since epoch.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Current state of the rate plan (draft or published).
     */
    state?: pulumi.Input<enums.apigee.v1.RatePlanState>;
}
