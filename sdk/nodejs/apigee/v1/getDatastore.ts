// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Get a Datastore
 */
export function getDatastore(args: GetDatastoreArgs, opts?: pulumi.InvokeOptions): Promise<GetDatastoreResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:apigee/v1:getDatastore", {
        "datastoreId": args.datastoreId,
        "organizationId": args.organizationId,
    }, opts);
}

export interface GetDatastoreArgs {
    datastoreId: string;
    organizationId: string;
}

export interface GetDatastoreResult {
    /**
     * Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
     */
    readonly createTime: string;
    /**
     * Datastore Configurations.
     */
    readonly datastoreConfig: outputs.apigee.v1.GoogleCloudApigeeV1DatastoreConfigResponse;
    /**
     * Display name in UI
     */
    readonly displayName: string;
    /**
     * Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
     */
    readonly lastUpdateTime: string;
    /**
     * Organization that the datastore belongs to
     */
    readonly org: string;
    /**
     * Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`
     */
    readonly self: string;
    /**
     * Destination storage type. Supported types `gcs` or `bigquery`.
     */
    readonly targetType: string;
}

export function getDatastoreOutput(args: GetDatastoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatastoreResult> {
    return pulumi.output(args).apply(a => getDatastore(a, opts))
}

export interface GetDatastoreOutputArgs {
    datastoreId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
}
