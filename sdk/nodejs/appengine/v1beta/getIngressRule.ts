// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets the specified firewall rule.
 */
export function getIngressRule(args: GetIngressRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetIngressRuleResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:appengine/v1beta:getIngressRule", {
        "appId": args.appId,
        "ingressRuleId": args.ingressRuleId,
    }, opts);
}

export interface GetIngressRuleArgs {
    appId: string;
    ingressRuleId: string;
}

export interface GetIngressRuleResult {
    /**
     * The action to take on matched requests.
     */
    readonly action: string;
    /**
     * An optional string description of this rule. This field has a maximum length of 400 characters.
     */
    readonly description: string;
    /**
     * A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
     */
    readonly priority: number;
    /**
     * IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character "*" to match all IPs equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
     */
    readonly sourceRange: string;
}

export function getIngressRuleOutput(args: GetIngressRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIngressRuleResult> {
    return pulumi.output(args).apply(a => getIngressRule(a, opts))
}

export interface GetIngressRuleOutputArgs {
    appId: pulumi.Input<string>;
    ingressRuleId: pulumi.Input<string>;
}
