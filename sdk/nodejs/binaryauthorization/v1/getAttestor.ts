// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets an attestor. Returns NOT_FOUND if the attestor does not exist.
 */
export function getAttestor(args: GetAttestorArgs, opts?: pulumi.InvokeOptions): Promise<GetAttestorResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:binaryauthorization/v1:getAttestor", {
        "attestorId": args.attestorId,
        "project": args.project,
    }, opts);
}

export interface GetAttestorArgs {
    attestorId: string;
    project?: string;
}

export interface GetAttestorResult {
    /**
     * Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.
     */
    readonly description: string;
    /**
     * Optional. Used to prevent updating the attestor when another request has updated it since it was retrieved.
     */
    readonly etag: string;
    /**
     * The resource name, in the format: `projects/*&#47;attestors/*`. This field may not be updated.
     */
    readonly name: string;
    /**
     * Time when the attestor was last updated.
     */
    readonly updateTime: string;
    /**
     * This specifies how an attestation will be read, and how it will be used during policy enforcement.
     */
    readonly userOwnedGrafeasNote: outputs.binaryauthorization.v1.UserOwnedGrafeasNoteResponse;
}

export function getAttestorOutput(args: GetAttestorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAttestorResult> {
    return pulumi.output(args).apply(a => getAttestor(a, opts))
}

export interface GetAttestorOutputArgs {
    attestorId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
