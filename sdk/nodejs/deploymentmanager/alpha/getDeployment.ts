// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets information about a specific deployment.
 */
export function getDeployment(args: GetDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:deploymentmanager/alpha:getDeployment", {
        "deployment": args.deployment,
        "project": args.project,
    }, opts);
}

export interface GetDeploymentArgs {
    deployment: string;
    project?: string;
}

export interface GetDeploymentResult {
    /**
     * User provided default credential for the deployment.
     */
    readonly credential: outputs.deploymentmanager.alpha.CredentialResponse;
    /**
     * An optional user-provided description of the deployment.
     */
    readonly description: string;
    /**
     * Provides a fingerprint to use in requests to modify a deployment, such as `update()`, `stop()`, and `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided with `update()`, `stop()`, and `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time. The fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a `get()` request to a deployment.
     */
    readonly fingerprint: string;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    readonly insertTime: string;
    /**
     * Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
     */
    readonly labels: outputs.deploymentmanager.alpha.DeploymentLabelEntryResponse[];
    /**
     * URL of the manifest representing the last manifest that was successfully deployed. If no manifest has been successfully deployed, this field will be absent.
     */
    readonly manifest: string;
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name: string;
    /**
     * The Operation that most recently ran, or is currently running, on this deployment.
     */
    readonly operation: outputs.deploymentmanager.alpha.OperationResponse;
    /**
     * List of outputs from the last manifest that deployed successfully.
     */
    readonly outputs: outputs.deploymentmanager.alpha.DeploymentOutputEntryResponse[];
    /**
     * Server defined URL for the resource.
     */
    readonly selfLink: string;
    /**
     * [Input Only] The parameters that define your deployment, including the deployment configuration and relevant templates.
     */
    readonly target: outputs.deploymentmanager.alpha.TargetConfigurationResponse;
    /**
     * If Deployment Manager is currently updating or previewing an update to this deployment, the updated configuration appears here.
     */
    readonly update: outputs.deploymentmanager.alpha.DeploymentUpdateResponse;
    /**
     * Update timestamp in RFC3339 text format.
     */
    readonly updateTime: string;
}

export function getDeploymentOutput(args: GetDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentResult> {
    return pulumi.output(args).apply(a => getDeployment(a, opts))
}

export interface GetDeploymentOutputArgs {
    deployment: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
