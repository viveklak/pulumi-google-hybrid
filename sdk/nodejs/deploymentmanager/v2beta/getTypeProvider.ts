// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets information about a specific type provider.
 */
export function getTypeProvider(args: GetTypeProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetTypeProviderResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:deploymentmanager/v2beta:getTypeProvider", {
        "project": args.project,
        "typeProvider": args.typeProvider,
    }, opts);
}

export interface GetTypeProviderArgs {
    project?: string;
    typeProvider: string;
}

export interface GetTypeProviderResult {
    /**
     * Allows resource handling overrides for specific collections
     */
    readonly collectionOverrides: outputs.deploymentmanager.v2beta.CollectionOverrideResponse[];
    /**
     * Credential used when interacting with this type.
     */
    readonly credential: outputs.deploymentmanager.v2beta.CredentialResponse;
    /**
     * List of up to 2 custom certificate authority roots to use for TLS authentication when making calls on behalf of this type provider. If set, TLS authentication will exclusively use these roots instead of relying on publicly trusted certificate authorities when validating TLS certificate authenticity. The certificates must be in base64-encoded PEM format. The maximum size of each certificate must not exceed 10KB.
     */
    readonly customCertificateAuthorityRoots: string[];
    /**
     * An optional textual description of the resource; provided by the client when the resource is created.
     */
    readonly description: string;
    /**
     * Descriptor Url for the this type provider.
     */
    readonly descriptorUrl: string;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    readonly insertTime: string;
    /**
     * Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`
     */
    readonly labels: outputs.deploymentmanager.v2beta.TypeProviderLabelEntryResponse[];
    /**
     * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name: string;
    /**
     * The Operation that most recently ran, or is currently running, on this type provider.
     */
    readonly operation: outputs.deploymentmanager.v2beta.OperationResponse;
    /**
     * Options to apply when handling any resources in this service.
     */
    readonly options: outputs.deploymentmanager.v2beta.OptionsResponse;
    /**
     * Self link for the type provider.
     */
    readonly selfLink: string;
}

export function getTypeProviderOutput(args: GetTypeProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTypeProviderResult> {
    return pulumi.output(args).apply(a => getTypeProvider(a, opts))
}

export interface GetTypeProviderOutputArgs {
    project?: pulumi.Input<string>;
    typeProvider: pulumi.Input<string>;
}
