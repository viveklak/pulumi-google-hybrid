// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the details of a specific Connectivity Test.
 */
export function getConnectivityTest(args: GetConnectivityTestArgs, opts?: pulumi.InvokeOptions): Promise<GetConnectivityTestResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:networkmanagement/v1:getConnectivityTest", {
        "connectivityTestId": args.connectivityTestId,
        "project": args.project,
    }, opts);
}

export interface GetConnectivityTestArgs {
    connectivityTestId: string;
    project?: string;
}

export interface GetConnectivityTestResult {
    /**
     * The time the test was created.
     */
    readonly createTime: string;
    /**
     * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
     */
    readonly description: string;
    /**
     * Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.
     */
    readonly destination: outputs.networkmanagement.v1.EndpointResponse;
    /**
     * The display name of a Connectivity Test.
     */
    readonly displayName: string;
    /**
     * Resource labels to represent user-provided metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test_id}`
     */
    readonly name: string;
    /**
     * IP Protocol of the test. When not provided, "TCP" is assumed.
     */
    readonly protocol: string;
    /**
     * The reachability details of this test from the latest run. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.
     */
    readonly reachabilityDetails: outputs.networkmanagement.v1.ReachabilityDetailsResponse;
    /**
     * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
     */
    readonly relatedProjects: string[];
    /**
     * Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.
     */
    readonly source: outputs.networkmanagement.v1.EndpointResponse;
    /**
     * The time the test's configuration was updated.
     */
    readonly updateTime: string;
}

export function getConnectivityTestOutput(args: GetConnectivityTestOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConnectivityTestResult> {
    return pulumi.output(args).apply(a => getConnectivityTest(a, opts))
}

export interface GetConnectivityTestOutputArgs {
    connectivityTestId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
