// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a new ImportJob within a KeyRing. ImportJob.import_method is required.
 * Note - this resource's API doesn't support deletion. When deleted, the resource will persist
 * on Google Cloud even though it will be deleted from Pulumi state.
 */
export class ImportJob extends pulumi.CustomResource {
    /**
     * Get an existing ImportJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ImportJob {
        return new ImportJob(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:cloudkms/v1:ImportJob';

    /**
     * Returns true if the given object is an instance of ImportJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportJob.__pulumiType;
    }

    /**
     * Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.
     */
    public /*out*/ readonly attestation!: pulumi.Output<outputs.cloudkms.v1.KeyOperationAttestationResponse>;
    /**
     * The time at which this ImportJob was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The time this ImportJob expired. Only present if state is EXPIRED.
     */
    public /*out*/ readonly expireEventTime!: pulumi.Output<string>;
    /**
     * The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * The time this ImportJob's key material was generated.
     */
    public /*out*/ readonly generateTime!: pulumi.Output<string>;
    /**
     * Immutable. The wrapping method to be used for incoming key material.
     */
    public readonly importMethod!: pulumi.Output<string>;
    /**
     * The resource name for this ImportJob in the format `projects/*&#47;locations/*&#47;keyRings/*&#47;importJobs/*`.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
     */
    public readonly protectionLevel!: pulumi.Output<string>;
    /**
     * The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
     */
    public /*out*/ readonly publicKey!: pulumi.Output<outputs.cloudkms.v1.WrappingPublicKeyResponse>;
    /**
     * The current state of the ImportJob, indicating if it can be used.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a ImportJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportJobArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.importMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importMethod'");
            }
            if ((!args || args.keyRingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyRingId'");
            }
            if ((!args || args.protectionLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionLevel'");
            }
            resourceInputs["importJobId"] = args ? args.importJobId : undefined;
            resourceInputs["importMethod"] = args ? args.importMethod : undefined;
            resourceInputs["keyRingId"] = args ? args.keyRingId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["protectionLevel"] = args ? args.protectionLevel : undefined;
            resourceInputs["attestation"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expireEventTime"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["generateTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        } else {
            resourceInputs["attestation"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expireEventTime"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["generateTime"] = undefined /*out*/;
            resourceInputs["importMethod"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["protectionLevel"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImportJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ImportJob resource.
 */
export interface ImportJobArgs {
    /**
     * Required. It must be unique within a KeyRing and match the regular expression `[a-zA-Z0-9_-]{1,63}`
     */
    importJobId?: pulumi.Input<string>;
    /**
     * Immutable. The wrapping method to be used for incoming key material.
     */
    importMethod: pulumi.Input<enums.cloudkms.v1.ImportJobImportMethod>;
    keyRingId: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
     */
    protectionLevel: pulumi.Input<enums.cloudkms.v1.ImportJobProtectionLevel>;
}
