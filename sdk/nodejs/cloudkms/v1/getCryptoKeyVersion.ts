// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns metadata for a given CryptoKeyVersion.
 */
export function getCryptoKeyVersion(args: GetCryptoKeyVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetCryptoKeyVersionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:cloudkms/v1:getCryptoKeyVersion", {
        "cryptoKeyId": args.cryptoKeyId,
        "cryptoKeyVersionId": args.cryptoKeyVersionId,
        "keyRingId": args.keyRingId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetCryptoKeyVersionArgs {
    cryptoKeyId: string;
    cryptoKeyVersionId: string;
    keyRingId: string;
    location: string;
    project?: string;
}

export interface GetCryptoKeyVersionResult {
    /**
     * The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
     */
    readonly algorithm: string;
    /**
     * Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.
     */
    readonly attestation: outputs.cloudkms.v1.KeyOperationAttestationResponse;
    /**
     * The time at which this CryptoKeyVersion was created.
     */
    readonly createTime: string;
    /**
     * The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
     */
    readonly destroyEventTime: string;
    /**
     * The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
     */
    readonly destroyTime: string;
    /**
     * ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
     */
    readonly externalProtectionLevelOptions: outputs.cloudkms.v1.ExternalProtectionLevelOptionsResponse;
    /**
     * The time this CryptoKeyVersion's key material was generated.
     */
    readonly generateTime: string;
    /**
     * The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
     */
    readonly importFailureReason: string;
    /**
     * The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
     */
    readonly importJob: string;
    /**
     * The time at which this CryptoKeyVersion's key material was most recently imported.
     */
    readonly importTime: string;
    /**
     * The resource name for this CryptoKeyVersion in the format `projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*&#47;cryptoKeyVersions/*`.
     */
    readonly name: string;
    /**
     * The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
     */
    readonly protectionLevel: string;
    /**
     * Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
     */
    readonly reimportEligible: boolean;
    /**
     * The current state of the CryptoKeyVersion.
     */
    readonly state: string;
}

export function getCryptoKeyVersionOutput(args: GetCryptoKeyVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCryptoKeyVersionResult> {
    return pulumi.output(args).apply(a => getCryptoKeyVersion(a, opts))
}

export interface GetCryptoKeyVersionOutputArgs {
    cryptoKeyId: pulumi.Input<string>;
    cryptoKeyVersionId: pulumi.Input<string>;
    keyRingId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
