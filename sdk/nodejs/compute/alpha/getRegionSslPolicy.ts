// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Lists all of the ordered rules present in a single specified policy.
 */
export function getRegionSslPolicy(args: GetRegionSslPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetRegionSslPolicyResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:compute/alpha:getRegionSslPolicy", {
        "project": args.project,
        "region": args.region,
        "sslPolicy": args.sslPolicy,
    }, opts);
}

export interface GetRegionSslPolicyArgs {
    project?: string;
    region: string;
    sslPolicy: string;
}

export interface GetRegionSslPolicyResult {
    /**
     * Creation timestamp in RFC3339 text format.
     */
    readonly creationTimestamp: string;
    /**
     * A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.
     */
    readonly customFeatures: string[];
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    readonly description: string;
    /**
     * The list of features enabled in the SSL policy.
     */
    readonly enabledFeatures: string[];
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy.
     */
    readonly fingerprint: string;
    /**
     * [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies.
     */
    readonly kind: string;
    /**
     * The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
     */
    readonly minTlsVersion: string;
    /**
     * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name: string;
    /**
     * Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
     */
    readonly profile: string;
    /**
     * URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies.
     */
    readonly region: string;
    /**
     * Server-defined URL for the resource.
     */
    readonly selfLink: string;
    /**
     * Server-defined URL for this resource with the resource id.
     */
    readonly selfLinkWithId: string;
    /**
     * Security settings for the proxy. This field is only applicable to a global backend service with the loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     */
    readonly tlsSettings: outputs.compute.alpha.ServerTlsSettingsResponse;
    /**
     * If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.
     */
    readonly warnings: outputs.compute.alpha.RegionSslPolicyWarningsItemResponse[];
}

export function getRegionSslPolicyOutput(args: GetRegionSslPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegionSslPolicyResult> {
    return pulumi.output(args).apply(a => getRegionSslPolicy(a, opts))
}

export interface GetRegionSslPolicyOutputArgs {
    project?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    sslPolicy: pulumi.Input<string>;
}
