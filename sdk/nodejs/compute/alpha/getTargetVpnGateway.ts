// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.
 */
export function getTargetVpnGateway(args: GetTargetVpnGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetTargetVpnGatewayResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:compute/alpha:getTargetVpnGateway", {
        "project": args.project,
        "region": args.region,
        "targetVpnGateway": args.targetVpnGateway,
    }, opts);
}

export interface GetTargetVpnGatewayArgs {
    project?: string;
    region: string;
    targetVpnGateway: string;
}

export interface GetTargetVpnGatewayResult {
    /**
     * Creation timestamp in RFC3339 text format.
     */
    readonly creationTimestamp: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    readonly description: string;
    /**
     * A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway.
     */
    readonly forwardingRules: string[];
    /**
     * Type of resource. Always compute#targetVpnGateway for target VPN gateways.
     */
    readonly kind: string;
    /**
     * A fingerprint for the labels being applied to this TargetVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a TargetVpnGateway.
     */
    readonly labelFingerprint: string;
    /**
     * Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
     */
    readonly labels: {[key: string]: string};
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name: string;
    /**
     * URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
     */
    readonly network: string;
    /**
     * URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    readonly region: string;
    /**
     * Server-defined URL for the resource.
     */
    readonly selfLink: string;
    /**
     * The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
     */
    readonly status: string;
    /**
     * A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway.
     */
    readonly tunnels: string[];
}

export function getTargetVpnGatewayOutput(args: GetTargetVpnGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTargetVpnGatewayResult> {
    return pulumi.output(args).apply(a => getTargetVpnGateway(a, opts))
}

export interface GetTargetVpnGatewayOutputArgs {
    project?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    targetVpnGateway: pulumi.Input<string>;
}
