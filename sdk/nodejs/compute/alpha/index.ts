// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export * from "./address";
export * from "./autoscaler";
export * from "./backendBucket";
export * from "./backendBucketIamPolicy";
export * from "./backendService";
export * from "./backendServiceIamPolicy";
export * from "./disk";
export * from "./diskIamPolicy";
export * from "./externalVpnGateway";
export * from "./firewall";
export * from "./firewallPolicy";
export * from "./firewallPolicyIamPolicy";
export * from "./forwardingRule";
export * from "./futureReservation";
export * from "./getAddress";
export * from "./getAutoscaler";
export * from "./getBackendBucket";
export * from "./getBackendBucketIamPolicy";
export * from "./getBackendService";
export * from "./getBackendServiceIamPolicy";
export * from "./getDisk";
export * from "./getDiskIamPolicy";
export * from "./getExternalVpnGateway";
export * from "./getFirewall";
export * from "./getFirewallPolicy";
export * from "./getFirewallPolicyIamPolicy";
export * from "./getForwardingRule";
export * from "./getFutureReservation";
export * from "./getGlobalAddress";
export * from "./getGlobalForwardingRule";
export * from "./getGlobalNetworkEndpointGroup";
export * from "./getGlobalPublicDelegatedPrefix";
export * from "./getHealthCheck";
export * from "./getHttpHealthCheck";
export * from "./getHttpsHealthCheck";
export * from "./getImage";
export * from "./getImageIamPolicy";
export * from "./getInstance";
export * from "./getInstanceGroup";
export * from "./getInstanceGroupManager";
export * from "./getInstanceIamPolicy";
export * from "./getInstanceTemplate";
export * from "./getInstanceTemplateIamPolicy";
export * from "./getInstantSnapshot";
export * from "./getInstantSnapshotIamPolicy";
export * from "./getInterconnect";
export * from "./getInterconnectAttachment";
export * from "./getInterconnectAttachmentIamPolicy";
export * from "./getInterconnectIamPolicy";
export * from "./getLicense";
export * from "./getLicenseCodeIamPolicy";
export * from "./getLicenseIamPolicy";
export * from "./getMachineImage";
export * from "./getMachineImageIamPolicy";
export * from "./getNetwork";
export * from "./getNetworkEdgeSecurityService";
export * from "./getNetworkEndpointGroup";
export * from "./getNetworkFirewallPolicy";
export * from "./getNetworkFirewallPolicyIamPolicy";
export * from "./getNodeGroup";
export * from "./getNodeGroupIamPolicy";
export * from "./getNodeTemplate";
export * from "./getNodeTemplateIamPolicy";
export * from "./getOrganizationSecurityPolicy";
export * from "./getPacketMirroring";
export * from "./getPublicAdvertisedPrefix";
export * from "./getPublicDelegatedPrefix";
export * from "./getRegionAutoscaler";
export * from "./getRegionBackendService";
export * from "./getRegionBackendServiceIamPolicy";
export * from "./getRegionCommitment";
export * from "./getRegionDisk";
export * from "./getRegionDiskIamPolicy";
export * from "./getRegionHealthCheck";
export * from "./getRegionHealthCheckService";
export * from "./getRegionInstanceGroupManager";
export * from "./getRegionInstantSnapshot";
export * from "./getRegionInstantSnapshotIamPolicy";
export * from "./getRegionNetwork";
export * from "./getRegionNetworkEndpointGroup";
export * from "./getRegionNetworkFirewallPolicy";
export * from "./getRegionNetworkFirewallPolicyIamPolicy";
export * from "./getRegionNetworkIamPolicy";
export * from "./getRegionNotificationEndpoint";
export * from "./getRegionSecurityPolicy";
export * from "./getRegionSslCertificate";
export * from "./getRegionSslPolicy";
export * from "./getRegionTargetHttpProxy";
export * from "./getRegionTargetHttpsProxy";
export * from "./getRegionTargetTcpProxy";
export * from "./getRegionUrlMap";
export * from "./getReservation";
export * from "./getReservationIamPolicy";
export * from "./getResourcePolicy";
export * from "./getResourcePolicyIamPolicy";
export * from "./getRoute";
export * from "./getRouter";
export * from "./getSecurityPolicy";
export * from "./getServiceAttachment";
export * from "./getServiceAttachmentIamPolicy";
export * from "./getSnapshot";
export * from "./getSnapshotIamPolicy";
export * from "./getSslCertificate";
export * from "./getSslPolicy";
export * from "./getSubnetwork";
export * from "./getSubnetworkIamPolicy";
export * from "./getTargetGrpcProxy";
export * from "./getTargetHttpProxy";
export * from "./getTargetHttpsProxy";
export * from "./getTargetInstance";
export * from "./getTargetPool";
export * from "./getTargetSslProxy";
export * from "./getTargetTcpProxy";
export * from "./getTargetVpnGateway";
export * from "./getUrlMap";
export * from "./getVpnGateway";
export * from "./getVpnTunnel";
export * from "./globalAddress";
export * from "./globalForwardingRule";
export * from "./globalNetworkEndpointGroup";
export * from "./globalPublicDelegatedPrefix";
export * from "./healthCheck";
export * from "./httpHealthCheck";
export * from "./httpsHealthCheck";
export * from "./image";
export * from "./imageIamPolicy";
export * from "./instance";
export * from "./instanceGroup";
export * from "./instanceGroupManager";
export * from "./instanceIamPolicy";
export * from "./instanceTemplate";
export * from "./instanceTemplateIamPolicy";
export * from "./instantSnapshot";
export * from "./instantSnapshotIamPolicy";
export * from "./interconnect";
export * from "./interconnectAttachment";
export * from "./interconnectAttachmentIamPolicy";
export * from "./interconnectIamPolicy";
export * from "./license";
export * from "./licenseCodeIamPolicy";
export * from "./licenseIamPolicy";
export * from "./machineImage";
export * from "./machineImageIamPolicy";
export * from "./network";
export * from "./networkEdgeSecurityService";
export * from "./networkEndpointGroup";
export * from "./networkFirewallPolicy";
export * from "./networkFirewallPolicyIamPolicy";
export * from "./nodeGroup";
export * from "./nodeGroupIamPolicy";
export * from "./nodeTemplate";
export * from "./nodeTemplateIamPolicy";
export * from "./organizationSecurityPolicy";
export * from "./packetMirroring";
export * from "./publicAdvertisedPrefix";
export * from "./publicDelegatedPrefix";
export * from "./regionAutoscaler";
export * from "./regionBackendService";
export * from "./regionBackendServiceIamPolicy";
export * from "./regionCommitment";
export * from "./regionDisk";
export * from "./regionDiskIamPolicy";
export * from "./regionHealthCheck";
export * from "./regionHealthCheckService";
export * from "./regionInstanceGroupManager";
export * from "./regionInstantSnapshot";
export * from "./regionInstantSnapshotIamPolicy";
export * from "./regionNetwork";
export * from "./regionNetworkEndpointGroup";
export * from "./regionNetworkFirewallPolicy";
export * from "./regionNetworkFirewallPolicyIamPolicy";
export * from "./regionNetworkIamPolicy";
export * from "./regionNotificationEndpoint";
export * from "./regionSecurityPolicy";
export * from "./regionSslCertificate";
export * from "./regionSslPolicy";
export * from "./regionTargetHttpProxy";
export * from "./regionTargetHttpsProxy";
export * from "./regionTargetTcpProxy";
export * from "./regionUrlMap";
export * from "./reservation";
export * from "./reservationIamPolicy";
export * from "./resourcePolicy";
export * from "./resourcePolicyIamPolicy";
export * from "./route";
export * from "./router";
export * from "./securityPolicy";
export * from "./serviceAttachment";
export * from "./serviceAttachmentIamPolicy";
export * from "./snapshot";
export * from "./snapshotIamPolicy";
export * from "./sslCertificate";
export * from "./sslPolicy";
export * from "./subnetwork";
export * from "./subnetworkIamPolicy";
export * from "./targetGrpcProxy";
export * from "./targetHttpProxy";
export * from "./targetHttpsProxy";
export * from "./targetInstance";
export * from "./targetPool";
export * from "./targetSslProxy";
export * from "./targetTcpProxy";
export * from "./targetVpnGateway";
export * from "./urlMap";
export * from "./vpnGateway";
export * from "./vpnTunnel";

// Export enums:
export * from "../../types/enums/compute/alpha";

// Import resources to register:
import { Address } from "./address";
import { Autoscaler } from "./autoscaler";
import { BackendBucket } from "./backendBucket";
import { BackendBucketIamPolicy } from "./backendBucketIamPolicy";
import { BackendService } from "./backendService";
import { BackendServiceIamPolicy } from "./backendServiceIamPolicy";
import { Disk } from "./disk";
import { DiskIamPolicy } from "./diskIamPolicy";
import { ExternalVpnGateway } from "./externalVpnGateway";
import { Firewall } from "./firewall";
import { FirewallPolicy } from "./firewallPolicy";
import { FirewallPolicyIamPolicy } from "./firewallPolicyIamPolicy";
import { ForwardingRule } from "./forwardingRule";
import { FutureReservation } from "./futureReservation";
import { GlobalAddress } from "./globalAddress";
import { GlobalForwardingRule } from "./globalForwardingRule";
import { GlobalNetworkEndpointGroup } from "./globalNetworkEndpointGroup";
import { GlobalPublicDelegatedPrefix } from "./globalPublicDelegatedPrefix";
import { HealthCheck } from "./healthCheck";
import { HttpHealthCheck } from "./httpHealthCheck";
import { HttpsHealthCheck } from "./httpsHealthCheck";
import { Image } from "./image";
import { ImageIamPolicy } from "./imageIamPolicy";
import { Instance } from "./instance";
import { InstanceGroup } from "./instanceGroup";
import { InstanceGroupManager } from "./instanceGroupManager";
import { InstanceIamPolicy } from "./instanceIamPolicy";
import { InstanceTemplate } from "./instanceTemplate";
import { InstanceTemplateIamPolicy } from "./instanceTemplateIamPolicy";
import { InstantSnapshot } from "./instantSnapshot";
import { InstantSnapshotIamPolicy } from "./instantSnapshotIamPolicy";
import { Interconnect } from "./interconnect";
import { InterconnectAttachment } from "./interconnectAttachment";
import { InterconnectAttachmentIamPolicy } from "./interconnectAttachmentIamPolicy";
import { InterconnectIamPolicy } from "./interconnectIamPolicy";
import { License } from "./license";
import { LicenseCodeIamPolicy } from "./licenseCodeIamPolicy";
import { LicenseIamPolicy } from "./licenseIamPolicy";
import { MachineImage } from "./machineImage";
import { MachineImageIamPolicy } from "./machineImageIamPolicy";
import { Network } from "./network";
import { NetworkEdgeSecurityService } from "./networkEdgeSecurityService";
import { NetworkEndpointGroup } from "./networkEndpointGroup";
import { NetworkFirewallPolicy } from "./networkFirewallPolicy";
import { NetworkFirewallPolicyIamPolicy } from "./networkFirewallPolicyIamPolicy";
import { NodeGroup } from "./nodeGroup";
import { NodeGroupIamPolicy } from "./nodeGroupIamPolicy";
import { NodeTemplate } from "./nodeTemplate";
import { NodeTemplateIamPolicy } from "./nodeTemplateIamPolicy";
import { OrganizationSecurityPolicy } from "./organizationSecurityPolicy";
import { PacketMirroring } from "./packetMirroring";
import { PublicAdvertisedPrefix } from "./publicAdvertisedPrefix";
import { PublicDelegatedPrefix } from "./publicDelegatedPrefix";
import { RegionAutoscaler } from "./regionAutoscaler";
import { RegionBackendService } from "./regionBackendService";
import { RegionBackendServiceIamPolicy } from "./regionBackendServiceIamPolicy";
import { RegionCommitment } from "./regionCommitment";
import { RegionDisk } from "./regionDisk";
import { RegionDiskIamPolicy } from "./regionDiskIamPolicy";
import { RegionHealthCheck } from "./regionHealthCheck";
import { RegionHealthCheckService } from "./regionHealthCheckService";
import { RegionInstanceGroupManager } from "./regionInstanceGroupManager";
import { RegionInstantSnapshot } from "./regionInstantSnapshot";
import { RegionInstantSnapshotIamPolicy } from "./regionInstantSnapshotIamPolicy";
import { RegionNetwork } from "./regionNetwork";
import { RegionNetworkEndpointGroup } from "./regionNetworkEndpointGroup";
import { RegionNetworkFirewallPolicy } from "./regionNetworkFirewallPolicy";
import { RegionNetworkFirewallPolicyIamPolicy } from "./regionNetworkFirewallPolicyIamPolicy";
import { RegionNetworkIamPolicy } from "./regionNetworkIamPolicy";
import { RegionNotificationEndpoint } from "./regionNotificationEndpoint";
import { RegionSecurityPolicy } from "./regionSecurityPolicy";
import { RegionSslCertificate } from "./regionSslCertificate";
import { RegionSslPolicy } from "./regionSslPolicy";
import { RegionTargetHttpProxy } from "./regionTargetHttpProxy";
import { RegionTargetHttpsProxy } from "./regionTargetHttpsProxy";
import { RegionTargetTcpProxy } from "./regionTargetTcpProxy";
import { RegionUrlMap } from "./regionUrlMap";
import { Reservation } from "./reservation";
import { ReservationIamPolicy } from "./reservationIamPolicy";
import { ResourcePolicy } from "./resourcePolicy";
import { ResourcePolicyIamPolicy } from "./resourcePolicyIamPolicy";
import { Route } from "./route";
import { Router } from "./router";
import { SecurityPolicy } from "./securityPolicy";
import { ServiceAttachment } from "./serviceAttachment";
import { ServiceAttachmentIamPolicy } from "./serviceAttachmentIamPolicy";
import { Snapshot } from "./snapshot";
import { SnapshotIamPolicy } from "./snapshotIamPolicy";
import { SslCertificate } from "./sslCertificate";
import { SslPolicy } from "./sslPolicy";
import { Subnetwork } from "./subnetwork";
import { SubnetworkIamPolicy } from "./subnetworkIamPolicy";
import { TargetGrpcProxy } from "./targetGrpcProxy";
import { TargetHttpProxy } from "./targetHttpProxy";
import { TargetHttpsProxy } from "./targetHttpsProxy";
import { TargetInstance } from "./targetInstance";
import { TargetPool } from "./targetPool";
import { TargetSslProxy } from "./targetSslProxy";
import { TargetTcpProxy } from "./targetTcpProxy";
import { TargetVpnGateway } from "./targetVpnGateway";
import { UrlMap } from "./urlMap";
import { VpnGateway } from "./vpnGateway";
import { VpnTunnel } from "./vpnTunnel";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "google-hybrid:compute/alpha:Address":
                return new Address(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Autoscaler":
                return new Autoscaler(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:BackendBucket":
                return new BackendBucket(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:BackendBucketIamPolicy":
                return new BackendBucketIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:BackendService":
                return new BackendService(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:BackendServiceIamPolicy":
                return new BackendServiceIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:DiskIamPolicy":
                return new DiskIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ExternalVpnGateway":
                return new ExternalVpnGateway(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:FirewallPolicyIamPolicy":
                return new FirewallPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ForwardingRule":
                return new ForwardingRule(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:FutureReservation":
                return new FutureReservation(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:GlobalAddress":
                return new GlobalAddress(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:GlobalForwardingRule":
                return new GlobalForwardingRule(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:GlobalNetworkEndpointGroup":
                return new GlobalNetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:GlobalPublicDelegatedPrefix":
                return new GlobalPublicDelegatedPrefix(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:HttpHealthCheck":
                return new HttpHealthCheck(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:HttpsHealthCheck":
                return new HttpsHealthCheck(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Image":
                return new Image(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ImageIamPolicy":
                return new ImageIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstanceGroup":
                return new InstanceGroup(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstanceGroupManager":
                return new InstanceGroupManager(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstanceIamPolicy":
                return new InstanceIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstanceTemplate":
                return new InstanceTemplate(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstanceTemplateIamPolicy":
                return new InstanceTemplateIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstantSnapshot":
                return new InstantSnapshot(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InstantSnapshotIamPolicy":
                return new InstantSnapshotIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Interconnect":
                return new Interconnect(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InterconnectAttachment":
                return new InterconnectAttachment(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InterconnectAttachmentIamPolicy":
                return new InterconnectAttachmentIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:InterconnectIamPolicy":
                return new InterconnectIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:License":
                return new License(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:LicenseCodeIamPolicy":
                return new LicenseCodeIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:LicenseIamPolicy":
                return new LicenseIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:MachineImage":
                return new MachineImage(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:MachineImageIamPolicy":
                return new MachineImageIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Network":
                return new Network(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NetworkEdgeSecurityService":
                return new NetworkEdgeSecurityService(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NetworkEndpointGroup":
                return new NetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NetworkFirewallPolicy":
                return new NetworkFirewallPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NetworkFirewallPolicyIamPolicy":
                return new NetworkFirewallPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NodeGroupIamPolicy":
                return new NodeGroupIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NodeTemplate":
                return new NodeTemplate(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:NodeTemplateIamPolicy":
                return new NodeTemplateIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:OrganizationSecurityPolicy":
                return new OrganizationSecurityPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:PacketMirroring":
                return new PacketMirroring(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:PublicAdvertisedPrefix":
                return new PublicAdvertisedPrefix(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:PublicDelegatedPrefix":
                return new PublicDelegatedPrefix(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionAutoscaler":
                return new RegionAutoscaler(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionBackendService":
                return new RegionBackendService(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionBackendServiceIamPolicy":
                return new RegionBackendServiceIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionCommitment":
                return new RegionCommitment(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionDisk":
                return new RegionDisk(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionDiskIamPolicy":
                return new RegionDiskIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionHealthCheck":
                return new RegionHealthCheck(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionHealthCheckService":
                return new RegionHealthCheckService(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionInstanceGroupManager":
                return new RegionInstanceGroupManager(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionInstantSnapshot":
                return new RegionInstantSnapshot(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionInstantSnapshotIamPolicy":
                return new RegionInstantSnapshotIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionNetwork":
                return new RegionNetwork(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionNetworkEndpointGroup":
                return new RegionNetworkEndpointGroup(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionNetworkFirewallPolicy":
                return new RegionNetworkFirewallPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionNetworkFirewallPolicyIamPolicy":
                return new RegionNetworkFirewallPolicyIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionNetworkIamPolicy":
                return new RegionNetworkIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionNotificationEndpoint":
                return new RegionNotificationEndpoint(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionSecurityPolicy":
                return new RegionSecurityPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionSslCertificate":
                return new RegionSslCertificate(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionSslPolicy":
                return new RegionSslPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionTargetHttpProxy":
                return new RegionTargetHttpProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionTargetHttpsProxy":
                return new RegionTargetHttpsProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionTargetTcpProxy":
                return new RegionTargetTcpProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:RegionUrlMap":
                return new RegionUrlMap(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Reservation":
                return new Reservation(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ReservationIamPolicy":
                return new ReservationIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ResourcePolicy":
                return new ResourcePolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ResourcePolicyIamPolicy":
                return new ResourcePolicyIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Route":
                return new Route(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Router":
                return new Router(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ServiceAttachment":
                return new ServiceAttachment(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:ServiceAttachmentIamPolicy":
                return new ServiceAttachmentIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:SnapshotIamPolicy":
                return new SnapshotIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:SslPolicy":
                return new SslPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:Subnetwork":
                return new Subnetwork(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:SubnetworkIamPolicy":
                return new SubnetworkIamPolicy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetGrpcProxy":
                return new TargetGrpcProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetHttpProxy":
                return new TargetHttpProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetHttpsProxy":
                return new TargetHttpsProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetInstance":
                return new TargetInstance(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetPool":
                return new TargetPool(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetSslProxy":
                return new TargetSslProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetTcpProxy":
                return new TargetTcpProxy(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:TargetVpnGateway":
                return new TargetVpnGateway(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:UrlMap":
                return new UrlMap(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "google-hybrid:compute/alpha:VpnTunnel":
                return new VpnTunnel(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("google-hybrid", "compute/alpha", _module)
