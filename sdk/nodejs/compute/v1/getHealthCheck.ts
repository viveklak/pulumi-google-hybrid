// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.
 */
export function getHealthCheck(args: GetHealthCheckArgs, opts?: pulumi.InvokeOptions): Promise<GetHealthCheckResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:compute/v1:getHealthCheck", {
        "healthCheck": args.healthCheck,
        "project": args.project,
    }, opts);
}

export interface GetHealthCheckArgs {
    healthCheck: string;
    project?: string;
}

export interface GetHealthCheckResult {
    /**
     * How often (in seconds) to send a health check. The default value is 5 seconds.
     */
    readonly checkIntervalSec: number;
    /**
     * Creation timestamp in 3339 text format.
     */
    readonly creationTimestamp: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    readonly description: string;
    readonly grpcHealthCheck: outputs.compute.v1.GRPCHealthCheckResponse;
    /**
     * A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
     */
    readonly healthyThreshold: number;
    readonly http2HealthCheck: outputs.compute.v1.HTTP2HealthCheckResponse;
    readonly httpHealthCheck: outputs.compute.v1.HTTPHealthCheckResponse;
    readonly httpsHealthCheck: outputs.compute.v1.HTTPSHealthCheckResponse;
    /**
     * Type of the resource.
     */
    readonly kind: string;
    /**
     * Configure logging on this health check.
     */
    readonly logConfig: outputs.compute.v1.HealthCheckLogConfigResponse;
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash.
     */
    readonly name: string;
    /**
     * Region where the health check resides. Not applicable to global health checks.
     */
    readonly region: string;
    /**
     * Server-defined URL for the resource.
     */
    readonly selfLink: string;
    readonly sslHealthCheck: outputs.compute.v1.SSLHealthCheckResponse;
    readonly tcpHealthCheck: outputs.compute.v1.TCPHealthCheckResponse;
    /**
     * How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
     */
    readonly timeoutSec: number;
    /**
     * Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. Exactly one of the protocol-specific health check field must be specified, which must match type field.
     */
    readonly type: string;
    /**
     * A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
     */
    readonly unhealthyThreshold: number;
}

export function getHealthCheckOutput(args: GetHealthCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHealthCheckResult> {
    return pulumi.output(args).apply(a => getHealthCheck(a, opts))
}

export interface GetHealthCheckOutputArgs {
    healthCheck: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
