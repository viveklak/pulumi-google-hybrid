// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns the specified node template. Gets a list of available node templates by making a list() request.
 */
export function getNodeTemplate(args: GetNodeTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeTemplateResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:compute/v1:getNodeTemplate", {
        "nodeTemplate": args.nodeTemplate,
        "project": args.project,
        "region": args.region,
    }, opts);
}

export interface GetNodeTemplateArgs {
    nodeTemplate: string;
    project?: string;
    region: string;
}

export interface GetNodeTemplateResult {
    readonly accelerators: outputs.compute.v1.AcceleratorConfigResponse[];
    /**
     * CPU overcommit.
     */
    readonly cpuOvercommitType: string;
    /**
     * Creation timestamp in RFC3339 text format.
     */
    readonly creationTimestamp: string;
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    readonly description: string;
    readonly disks: outputs.compute.v1.LocalDiskResponse[];
    /**
     * The type of the resource. Always compute#nodeTemplate for node templates.
     */
    readonly kind: string;
    /**
     * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    readonly name: string;
    /**
     * Labels to use for node affinity, which will be used in instance scheduling.
     */
    readonly nodeAffinityLabels: {[key: string]: string};
    /**
     * The node type to use for nodes group that are created from this template.
     */
    readonly nodeType: string;
    /**
     * The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. This field is mutually exclusive with the node_type property; you can only define one or the other, but not both.
     */
    readonly nodeTypeFlexibility: outputs.compute.v1.NodeTemplateNodeTypeFlexibilityResponse;
    /**
     * The name of the region where the node template resides, such as us-central1.
     */
    readonly region: string;
    /**
     * Server-defined URL for the resource.
     */
    readonly selfLink: string;
    /**
     * Sets the binding properties for the physical server. Valid values include: - *[Default]* RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server - RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible See Sole-tenant node options for more information.
     */
    readonly serverBinding: outputs.compute.v1.ServerBindingResponse;
    /**
     * The status of the node template. One of the following values: CREATING, READY, and DELETING.
     */
    readonly status: string;
    /**
     * An optional, human-readable explanation of the status.
     */
    readonly statusMessage: string;
}

export function getNodeTemplateOutput(args: GetNodeTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeTemplateResult> {
    return pulumi.output(args).apply(a => getNodeTemplate(a, opts))
}

export interface GetNodeTemplateOutputArgs {
    nodeTemplate: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    region: pulumi.Input<string>;
}
