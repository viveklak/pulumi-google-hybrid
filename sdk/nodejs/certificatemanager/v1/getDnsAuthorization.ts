// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single DnsAuthorization.
 */
export function getDnsAuthorization(args: GetDnsAuthorizationArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsAuthorizationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:certificatemanager/v1:getDnsAuthorization", {
        "dnsAuthorizationId": args.dnsAuthorizationId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDnsAuthorizationArgs {
    dnsAuthorizationId: string;
    location: string;
    project?: string;
}

export interface GetDnsAuthorizationResult {
    /**
     * The creation timestamp of a DnsAuthorization.
     */
    readonly createTime: string;
    /**
     * One or more paragraphs of text description of a DnsAuthorization.
     */
    readonly description: string;
    /**
     * DNS Resource Record that needs to be added to DNS configuration.
     */
    readonly dnsResourceRecord: outputs.certificatemanager.v1.DnsResourceRecordResponse;
    /**
     * Immutable. A domain which is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
     */
    readonly domain: string;
    /**
     * Set of labels associated with a DnsAuthorization.
     */
    readonly labels: {[key: string]: string};
    /**
     * A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*&#47;locations/*&#47;dnsAuthorizations/*`.
     */
    readonly name: string;
    /**
     * The last update timestamp of a DnsAuthorization.
     */
    readonly updateTime: string;
}

export function getDnsAuthorizationOutput(args: GetDnsAuthorizationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsAuthorizationResult> {
    return pulumi.output(args).apply(a => getDnsAuthorization(a, opts))
}

export interface GetDnsAuthorizationOutputArgs {
    dnsAuthorizationId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
