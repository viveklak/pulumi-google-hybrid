// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new backup run on demand.
 * Auto-naming is currently not supported for this resource.
 */
export class BackupRun extends pulumi.CustomResource {
    /**
     * Get an existing BackupRun resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BackupRun {
        return new BackupRun(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:sqladmin/v1:BackupRun';

    /**
     * Returns true if the given object is an instance of BackupRun.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupRun {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupRun.__pulumiType;
    }

    /**
     * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
     */
    public readonly backupKind!: pulumi.Output<string>;
    /**
     * The description of this run, only applicable to on-demand backups.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Encryption configuration specific to a backup.
     */
    public readonly diskEncryptionConfiguration!: pulumi.Output<outputs.sqladmin.v1.DiskEncryptionConfigurationResponse>;
    /**
     * Encryption status specific to a backup.
     */
    public readonly diskEncryptionStatus!: pulumi.Output<outputs.sqladmin.v1.DiskEncryptionStatusResponse>;
    /**
     * The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    public readonly enqueuedTime!: pulumi.Output<string>;
    /**
     * Information about why the backup operation failed. This is only present if the run has the FAILED status.
     */
    public readonly error!: pulumi.Output<outputs.sqladmin.v1.OperationErrorResponse>;
    /**
     * Name of the database instance.
     */
    public readonly instance!: pulumi.Output<string>;
    /**
     * This is always `sql#backupRun`.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Location of the backups.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The URI of this resource.
     */
    public readonly selfLink!: pulumi.Output<string>;
    /**
     * The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    public readonly startTime!: pulumi.Output<string>;
    /**
     * The status of this run.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The type of this run; can be either "AUTOMATED" or "ON_DEMAND". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    public readonly windowStartTime!: pulumi.Output<string>;

    /**
     * Create a BackupRun resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupRunArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["backupKind"] = args ? args.backupKind : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskEncryptionConfiguration"] = args ? args.diskEncryptionConfiguration : undefined;
            resourceInputs["diskEncryptionStatus"] = args ? args.diskEncryptionStatus : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["enqueuedTime"] = args ? args.enqueuedTime : undefined;
            resourceInputs["error"] = args ? args.error : undefined;
            resourceInputs["id"] = args ? args.id : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["selfLink"] = args ? args.selfLink : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["windowStartTime"] = args ? args.windowStartTime : undefined;
        } else {
            resourceInputs["backupKind"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["diskEncryptionConfiguration"] = undefined /*out*/;
            resourceInputs["diskEncryptionStatus"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["enqueuedTime"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["instance"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["windowStartTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupRun.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a BackupRun resource.
 */
export interface BackupRunArgs {
    /**
     * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
     */
    backupKind?: pulumi.Input<enums.sqladmin.v1.BackupRunBackupKind>;
    /**
     * The description of this run, only applicable to on-demand backups.
     */
    description?: pulumi.Input<string>;
    /**
     * Encryption configuration specific to a backup.
     */
    diskEncryptionConfiguration?: pulumi.Input<inputs.sqladmin.v1.DiskEncryptionConfigurationArgs>;
    /**
     * Encryption status specific to a backup.
     */
    diskEncryptionStatus?: pulumi.Input<inputs.sqladmin.v1.DiskEncryptionStatusArgs>;
    /**
     * The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    enqueuedTime?: pulumi.Input<string>;
    /**
     * Information about why the backup operation failed. This is only present if the run has the FAILED status.
     */
    error?: pulumi.Input<inputs.sqladmin.v1.OperationErrorArgs>;
    /**
     * The identifier for this backup run. Unique only for a specific Cloud SQL instance.
     */
    id?: pulumi.Input<string>;
    /**
     * Name of the database instance.
     */
    instance: pulumi.Input<string>;
    /**
     * This is always `sql#backupRun`.
     */
    kind?: pulumi.Input<string>;
    /**
     * Location of the backups.
     */
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * The URI of this resource.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The status of this run.
     */
    status?: pulumi.Input<enums.sqladmin.v1.BackupRunStatus>;
    /**
     * The type of this run; can be either "AUTOMATED" or "ON_DEMAND". This field defaults to "ON_DEMAND" and is ignored, when specified for insert requests.
     */
    type?: pulumi.Input<enums.sqladmin.v1.BackupRunType>;
    /**
     * The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
     */
    windowStartTime?: pulumi.Input<string>;
}
