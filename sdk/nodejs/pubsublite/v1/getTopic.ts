// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns the topic configuration.
 */
export function getTopic(args: GetTopicArgs, opts?: pulumi.InvokeOptions): Promise<GetTopicResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:pubsublite/v1:getTopic", {
        "location": args.location,
        "project": args.project,
        "topicId": args.topicId,
    }, opts);
}

export interface GetTopicArgs {
    location: string;
    project?: string;
    topicId: string;
}

export interface GetTopicResult {
    /**
     * The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
     */
    readonly name: string;
    /**
     * The settings for this topic's partitions.
     */
    readonly partitionConfig: outputs.pubsublite.v1.PartitionConfigResponse;
    /**
     * The settings for this topic's Reservation usage.
     */
    readonly reservationConfig: outputs.pubsublite.v1.ReservationConfigResponse;
    /**
     * The settings for this topic's message retention.
     */
    readonly retentionConfig: outputs.pubsublite.v1.RetentionConfigResponse;
}

export function getTopicOutput(args: GetTopicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTopicResult> {
    return pulumi.output(args).apply(a => getTopic(a, opts))
}

export interface GetTopicOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    topicId: pulumi.Input<string>;
}
