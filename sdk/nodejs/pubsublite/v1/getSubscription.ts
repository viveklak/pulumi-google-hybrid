// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns the subscription configuration.
 */
export function getSubscription(args: GetSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetSubscriptionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:pubsublite/v1:getSubscription", {
        "location": args.location,
        "project": args.project,
        "subscriptionId": args.subscriptionId,
    }, opts);
}

export interface GetSubscriptionArgs {
    location: string;
    project?: string;
    subscriptionId: string;
}

export interface GetSubscriptionResult {
    /**
     * The settings for this subscription's message delivery.
     */
    readonly deliveryConfig: outputs.pubsublite.v1.DeliveryConfigResponse;
    /**
     * The name of the subscription. Structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
     */
    readonly name: string;
    /**
     * The name of the topic this subscription is attached to. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
     */
    readonly topic: string;
}

export function getSubscriptionOutput(args: GetSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubscriptionResult> {
    return pulumi.output(args).apply(a => getSubscription(a, opts))
}

export interface GetSubscriptionOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
}
