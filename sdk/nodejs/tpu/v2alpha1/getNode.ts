// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the details of a node.
 */
export function getNode(args: GetNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:tpu/v2alpha1:getNode", {
        "location": args.location,
        "nodeId": args.nodeId,
        "project": args.project,
    }, opts);
}

export interface GetNodeArgs {
    location: string;
    nodeId: string;
    project?: string;
}

export interface GetNodeResult {
    /**
     * The type of hardware accelerators associated with this node.
     */
    readonly acceleratorType: string;
    /**
     * The API version that created this Node.
     */
    readonly apiVersion: string;
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     */
    readonly cidrBlock: string;
    /**
     * The time when the node was created.
     */
    readonly createTime: string;
    /**
     * The additional data disks for the Node.
     */
    readonly dataDisks: outputs.tpu.v2alpha1.AttachedDiskResponse[];
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     */
    readonly description: string;
    /**
     * The health status of the TPU node.
     */
    readonly health: string;
    /**
     * If this field is populated, it contains a description of why the TPU Node is unhealthy.
     */
    readonly healthDescription: string;
    /**
     * Resource labels to represent user-provided metadata.
     */
    readonly labels: {[key: string]: string};
    /**
     * Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
     */
    readonly metadata: {[key: string]: string};
    /**
     * Immutable. The name of the TPU.
     */
    readonly name: string;
    /**
     * Network configurations for the TPU node.
     */
    readonly networkConfig: outputs.tpu.v2alpha1.NetworkConfigResponse;
    /**
     * The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
     */
    readonly networkEndpoints: outputs.tpu.v2alpha1.NetworkEndpointResponse[];
    /**
     * The runtime version running in the Node.
     */
    readonly runtimeVersion: string;
    /**
     * The scheduling options for this node.
     */
    readonly schedulingConfig: outputs.tpu.v2alpha1.SchedulingConfigResponse;
    /**
     * The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
     */
    readonly serviceAccount: outputs.tpu.v2alpha1.ServiceAccountResponse;
    /**
     * The current state for the TPU Node.
     */
    readonly state: string;
    /**
     * The Symptoms that have occurred to the TPU Node.
     */
    readonly symptoms: outputs.tpu.v2alpha1.SymptomResponse[];
    /**
     * Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
     */
    readonly tags: string[];
}

export function getNodeOutput(args: GetNodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodeResult> {
    return pulumi.output(args).apply(a => getNode(a, opts))
}

export interface GetNodeOutputArgs {
    location: pulumi.Input<string>;
    nodeId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
