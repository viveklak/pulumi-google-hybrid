// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new MigratingVm in a given Source.
 * Auto-naming is currently not supported for this resource.
 */
export class MigratingVm extends pulumi.CustomResource {
    /**
     * Get an existing MigratingVm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MigratingVm {
        return new MigratingVm(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:vmmigration/v1:MigratingVm';

    /**
     * Returns true if the given object is an instance of MigratingVm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MigratingVm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MigratingVm.__pulumiType;
    }

    /**
     * Details of the target VM in Compute Engine.
     */
    public readonly computeEngineTargetDefaults!: pulumi.Output<outputs.vmmigration.v1.ComputeEngineTargetDefaultsResponse>;
    /**
     * The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source).
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The percentage progress of the current running replication cycle.
     */
    public /*out*/ readonly currentSyncInfo!: pulumi.Output<outputs.vmmigration.v1.ReplicationCycleResponse>;
    /**
     * The description attached to the migrating VM by the user.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The display name attached to the MigratingVm by the user.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Provides details on the state of the Migrating VM in case of an error in replication.
     */
    public /*out*/ readonly error!: pulumi.Output<outputs.vmmigration.v1.StatusResponse>;
    /**
     * The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource.
     */
    public /*out*/ readonly group!: pulumi.Output<string>;
    /**
     * The labels of the migrating VM.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The most updated snapshot created time in the source that finished replication.
     */
    public /*out*/ readonly lastSync!: pulumi.Output<outputs.vmmigration.v1.ReplicationSyncResponse>;
    /**
     * The identifier of the MigratingVm.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The replication schedule policy.
     */
    public readonly policy!: pulumi.Output<outputs.vmmigration.v1.SchedulePolicyResponse>;
    /**
     * The recent clone jobs performed on the migrating VM. This field holds the vm's last completed clone job and the vm's running clone job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
     */
    public /*out*/ readonly recentCloneJobs!: pulumi.Output<outputs.vmmigration.v1.CloneJobResponse[]>;
    /**
     * The recent cutover jobs performed on the migrating VM. This field holds the vm's last completed cutover job and the vm's running cutover job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.
     */
    public /*out*/ readonly recentCutoverJobs!: pulumi.Output<outputs.vmmigration.v1.CutoverJobResponse[]>;
    /**
     * The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
     */
    public readonly sourceVmId!: pulumi.Output<string>;
    /**
     * State of the MigratingVm.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The last time the migrating VM state was updated.
     */
    public /*out*/ readonly stateTime!: pulumi.Output<string>;
    /**
     * The last time the migrating VM resource was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a MigratingVm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigratingVmArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.migratingVmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'migratingVmId'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            resourceInputs["computeEngineTargetDefaults"] = args ? args.computeEngineTargetDefaults : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["migratingVmId"] = args ? args.migratingVmId : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["sourceVmId"] = args ? args.sourceVmId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["currentSyncInfo"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["group"] = undefined /*out*/;
            resourceInputs["lastSync"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["recentCloneJobs"] = undefined /*out*/;
            resourceInputs["recentCutoverJobs"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["computeEngineTargetDefaults"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["currentSyncInfo"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["error"] = undefined /*out*/;
            resourceInputs["group"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["lastSync"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["recentCloneJobs"] = undefined /*out*/;
            resourceInputs["recentCutoverJobs"] = undefined /*out*/;
            resourceInputs["sourceVmId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MigratingVm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a MigratingVm resource.
 */
export interface MigratingVmArgs {
    /**
     * Details of the target VM in Compute Engine.
     */
    computeEngineTargetDefaults?: pulumi.Input<inputs.vmmigration.v1.ComputeEngineTargetDefaultsArgs>;
    /**
     * The description attached to the migrating VM by the user.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name attached to the MigratingVm by the user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The labels of the migrating VM.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Required. The migratingVm identifier.
     */
    migratingVmId: pulumi.Input<string>;
    /**
     * The replication schedule policy.
     */
    policy?: pulumi.Input<inputs.vmmigration.v1.SchedulePolicyArgs>;
    project?: pulumi.Input<string>;
    /**
     * A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    sourceId: pulumi.Input<string>;
    /**
     * The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.
     */
    sourceVmId?: pulumi.Input<string>;
}
