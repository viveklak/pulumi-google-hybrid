// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single game server config.
 */
export function getConfig(args: GetConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:gameservices/v1:getConfig", {
        "configId": args.configId,
        "gameServerDeploymentId": args.gameServerDeploymentId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetConfigArgs {
    configId: string;
    gameServerDeploymentId: string;
    location: string;
    project?: string;
}

export interface GetConfigResult {
    /**
     * The creation time.
     */
    readonly createTime: string;
    /**
     * The description of the game server config.
     */
    readonly description: string;
    /**
     * FleetConfig contains a list of Agones fleet specs. Only one FleetConfig is allowed.
     */
    readonly fleetConfigs: outputs.gameservices.v1.FleetConfigResponse[];
    /**
     * The labels associated with this game server config. Each label is a key-value pair.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name of the game server config, in the following form: `projects/{project}/locations/{locationId}/gameServerDeployments/{deploymentId}/configs/{configId}`. For example, `projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config`.
     */
    readonly name: string;
    /**
     * The autoscaling settings.
     */
    readonly scalingConfigs: outputs.gameservices.v1.ScalingConfigResponse[];
    /**
     * The last-modified time.
     */
    readonly updateTime: string;
}

export function getConfigOutput(args: GetConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigResult> {
    return pulumi.output(args).apply(a => getConfig(a, opts))
}

export interface GetConfigOutputArgs {
    configId: pulumi.Input<string>;
    gameServerDeploymentId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
