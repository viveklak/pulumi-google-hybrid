// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single game server cluster.
 */
export function getGameServerCluster(args: GetGameServerClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetGameServerClusterResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:gameservices/v1beta:getGameServerCluster", {
        "gameServerClusterId": args.gameServerClusterId,
        "location": args.location,
        "project": args.project,
        "realmId": args.realmId,
        "view": args.view,
    }, opts);
}

export interface GetGameServerClusterArgs {
    gameServerClusterId: string;
    location: string;
    project?: string;
    realmId: string;
    view?: string;
}

export interface GetGameServerClusterResult {
    /**
     * The state of the Kubernetes cluster in preview. This will be available if view is set to FULL in the relevant list/get/preview request.
     */
    readonly clusterState: outputs.gameservices.v1beta.KubernetesClusterStateResponse;
    /**
     * The game server cluster connection information. This information is used to manage game server clusters.
     */
    readonly connectionInfo: outputs.gameservices.v1beta.GameServerClusterConnectionInfoResponse;
    /**
     * The creation time.
     */
    readonly createTime: string;
    /**
     * Human readable description of the cluster.
     */
    readonly description: string;
    /**
     * Used to perform consistent read-modify-write updates. If not set, a blind "overwrite" update happens.
     */
    readonly etag: string;
    /**
     * The labels associated with this game server cluster. Each label is a key-value pair.
     */
    readonly labels: {[key: string]: string};
    /**
     * The resource name of the game server cluster, in the following form: `projects/{project}/locations/{locationId}/realms/{realmId}/gameServerClusters/{gameServerClusterId}`. For example, `projects/my-project/locations/global/realms/zanzibar/gameServerClusters/my-gke-cluster`.
     */
    readonly name: string;
    /**
     * The last-modified time.
     */
    readonly updateTime: string;
}

export function getGameServerClusterOutput(args: GetGameServerClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGameServerClusterResult> {
    return pulumi.output(args).apply(a => getGameServerCluster(a, opts))
}

export interface GetGameServerClusterOutputArgs {
    gameServerClusterId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    realmId: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}
