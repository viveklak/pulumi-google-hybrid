// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single import.
 */
export function getMetadataImport(args: GetMetadataImportArgs, opts?: pulumi.InvokeOptions): Promise<GetMetadataImportResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:metastore/v1alpha:getMetadataImport", {
        "location": args.location,
        "metadataImportId": args.metadataImportId,
        "project": args.project,
        "serviceId": args.serviceId,
    }, opts);
}

export interface GetMetadataImportArgs {
    location: string;
    metadataImportId: string;
    project?: string;
    serviceId: string;
}

export interface GetMetadataImportResult {
    /**
     * The time when the metadata import was started.
     */
    readonly createTime: string;
    /**
     * Immutable. A database dump from a pre-existing metastore's database.
     */
    readonly databaseDump: outputs.metastore.v1alpha.DatabaseDumpResponse;
    /**
     * The description of the metadata import.
     */
    readonly description: string;
    /**
     * The time when the metadata import finished.
     */
    readonly endTime: string;
    /**
     * Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
     */
    readonly name: string;
    /**
     * The current state of the metadata import.
     */
    readonly state: string;
    /**
     * The time when the metadata import was last updated.
     */
    readonly updateTime: string;
}

export function getMetadataImportOutput(args: GetMetadataImportOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetadataImportResult> {
    return pulumi.output(args).apply(a => getMetadataImport(a, opts))
}

export interface GetMetadataImportOutputArgs {
    location: pulumi.Input<string>;
    metadataImportId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    serviceId: pulumi.Input<string>;
}
