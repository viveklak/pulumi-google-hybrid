// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single backup.
 */
export function getBackup(args: GetBackupArgs, opts?: pulumi.InvokeOptions): Promise<GetBackupResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:metastore/v1beta:getBackup", {
        "backupId": args.backupId,
        "location": args.location,
        "project": args.project,
        "serviceId": args.serviceId,
    }, opts);
}

export interface GetBackupArgs {
    backupId: string;
    location: string;
    project?: string;
    serviceId: string;
}

export interface GetBackupResult {
    /**
     * The time when the backup was started.
     */
    readonly createTime: string;
    /**
     * The description of the backup.
     */
    readonly description: string;
    /**
     * The time when the backup finished creating.
     */
    readonly endTime: string;
    /**
     * Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}
     */
    readonly name: string;
    /**
     * Services that are restoring from the backup.
     */
    readonly restoringServices: string[];
    /**
     * The revision of the service at the time of backup.
     */
    readonly serviceRevision: outputs.metastore.v1beta.ServiceResponse;
    /**
     * The current state of the backup.
     */
    readonly state: string;
}

export function getBackupOutput(args: GetBackupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackupResult> {
    return pulumi.output(args).apply(a => getBackup(a, opts))
}

export interface GetBackupOutputArgs {
    backupId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    serviceId: pulumi.Input<string>;
}
