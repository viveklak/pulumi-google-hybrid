// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets an issue model.
 */
export function getIssueModel(args: GetIssueModelArgs, opts?: pulumi.InvokeOptions): Promise<GetIssueModelResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:contactcenterinsights/v1:getIssueModel", {
        "issueModelId": args.issueModelId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetIssueModelArgs {
    issueModelId: string;
    location: string;
    project?: string;
}

export interface GetIssueModelResult {
    /**
     * The time at which this issue model was created.
     */
    readonly createTime: string;
    /**
     * The representative name for the issue model.
     */
    readonly displayName: string;
    /**
     * Configs for the input data that used to create the issue model.
     */
    readonly inputDataConfig: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigResponse;
    /**
     * Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}
     */
    readonly name: string;
    /**
     * State of the model.
     */
    readonly state: string;
    /**
     * Immutable. The issue model's label statistics on its training data.
     */
    readonly trainingStats: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1IssueModelLabelStatsResponse;
    /**
     * The most recent time at which the issue model was updated.
     */
    readonly updateTime: string;
}

export function getIssueModelOutput(args: GetIssueModelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIssueModelResult> {
    return pulumi.output(args).apply(a => getIssueModel(a, opts))
}

export interface GetIssueModelOutputArgs {
    issueModelId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
