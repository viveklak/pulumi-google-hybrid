// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets an analysis.
 */
export function getAnalysis(args: GetAnalysisArgs, opts?: pulumi.InvokeOptions): Promise<GetAnalysisResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:contactcenterinsights/v1:getAnalysis", {
        "analysisId": args.analysisId,
        "conversationId": args.conversationId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetAnalysisArgs {
    analysisId: string;
    conversationId: string;
    location: string;
    project?: string;
}

export interface GetAnalysisResult {
    /**
     * The result of the analysis, which is populated when the analysis finishes.
     */
    readonly analysisResult: outputs.contactcenterinsights.v1.GoogleCloudContactcenterinsightsV1AnalysisResultResponse;
    /**
     * The time at which the analysis was created, which occurs when the long-running operation completes.
     */
    readonly createTime: string;
    /**
     * Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
     */
    readonly name: string;
    /**
     * The time at which the analysis was requested.
     */
    readonly requestTime: string;
}

export function getAnalysisOutput(args: GetAnalysisOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAnalysisResult> {
    return pulumi.output(args).apply(a => getAnalysis(a, opts))
}

export interface GetAnalysisOutputArgs {
    analysisId: pulumi.Input<string>;
    conversationId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
