// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the specified DICOM store.
 */
export function getDicomStore(args: GetDicomStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetDicomStoreResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:healthcare/v1beta1:getDicomStore", {
        "datasetId": args.datasetId,
        "dicomStoreId": args.dicomStoreId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDicomStoreArgs {
    datasetId: string;
    dicomStoreId: string;
    location: string;
    project?: string;
}

export interface GetDicomStoreResult {
    /**
     * User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
     */
    readonly labels: {[key: string]: string};
    /**
     * Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
     */
    readonly name: string;
    /**
     * Notification destination for new DICOM instances. Supplied by the client.
     */
    readonly notificationConfig: outputs.healthcare.v1beta1.NotificationConfigResponse;
    /**
     * A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.
     */
    readonly streamConfigs: outputs.healthcare.v1beta1.GoogleCloudHealthcareV1beta1DicomStreamConfigResponse[];
}

export function getDicomStoreOutput(args: GetDicomStoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDicomStoreResult> {
    return pulumi.output(args).apply(a => getDicomStore(a, opts))
}

export interface GetDicomStoreOutputArgs {
    datasetId: pulumi.Input<string>;
    dicomStoreId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
