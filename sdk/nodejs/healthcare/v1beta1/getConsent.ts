// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.
 */
export function getConsent(args: GetConsentArgs, opts?: pulumi.InvokeOptions): Promise<GetConsentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:healthcare/v1beta1:getConsent", {
        "consentId": args.consentId,
        "consentStoreId": args.consentStoreId,
        "datasetId": args.datasetId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetConsentArgs {
    consentId: string;
    consentStoreId: string;
    datasetId: string;
    location: string;
    project?: string;
}

export interface GetConsentResult {
    /**
     * The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
     */
    readonly consentArtifact: string;
    /**
     * Timestamp in UTC of when this Consent is considered expired.
     */
    readonly expireTime: string;
    /**
     * Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
     */
    readonly metadata: {[key: string]: string};
    /**
     * Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
     */
    readonly name: string;
    /**
     * Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
     */
    readonly policies: outputs.healthcare.v1beta1.GoogleCloudHealthcareV1beta1ConsentPolicyResponse[];
    /**
     * The timestamp that the revision was created.
     */
    readonly revisionCreateTime: string;
    /**
     * The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
     */
    readonly revisionId: string;
    /**
     * Indicates the current state of this Consent.
     */
    readonly state: string;
    /**
     * Input only. The time to live for this Consent from when it is created.
     */
    readonly ttl: string;
    /**
     * User's UUID provided by the client.
     */
    readonly userId: string;
}

export function getConsentOutput(args: GetConsentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConsentResult> {
    return pulumi.output(args).apply(a => getConsent(a, opts))
}

export interface GetConsentOutputArgs {
    consentId: pulumi.Input<string>;
    consentStoreId: pulumi.Input<string>;
    datasetId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
