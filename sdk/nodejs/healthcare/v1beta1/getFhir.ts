// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets the contents of a FHIR resource. Implements the FHIR standard read interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#read), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#read), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#read)). Also supports the FHIR standard conditional read interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#cread), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#cread), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag value. On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `read`, see [Getting a FHIR resource](/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
 */
export function getFhir(args: GetFhirArgs, opts?: pulumi.InvokeOptions): Promise<GetFhirResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:healthcare/v1beta1:getFhir", {
        "datasetId": args.datasetId,
        "fhirId": args.fhirId,
        "fhirId1": args.fhirId1,
        "fhirStoreId": args.fhirStoreId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetFhirArgs {
    datasetId: string;
    fhirId: string;
    fhirId1: string;
    fhirStoreId: string;
    location: string;
    project?: string;
}

export interface GetFhirResult {
    /**
     * The HTTP Content-Type header value specifying the content type of the body.
     */
    readonly contentType: string;
    /**
     * The HTTP request/response body as raw binary.
     */
    readonly data: string;
    /**
     * Application specific response metadata. Must be set in the first response for streaming APIs.
     */
    readonly extensions: {[key: string]: string}[];
}

export function getFhirOutput(args: GetFhirOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFhirResult> {
    return pulumi.output(args).apply(a => getFhir(a, opts))
}

export interface GetFhirOutputArgs {
    datasetId: pulumi.Input<string>;
    fhirId: pulumi.Input<string>;
    fhirId1: pulumi.Input<string>;
    fhirStoreId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
