// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the specified routine resource by routine ID.
 */
export function getRoutine(args: GetRoutineArgs, opts?: pulumi.InvokeOptions): Promise<GetRoutineResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:bigquery/v2:getRoutine", {
        "datasetId": args.datasetId,
        "project": args.project,
        "readMask": args.readMask,
        "routineId": args.routineId,
    }, opts);
}

export interface GetRoutineArgs {
    datasetId: string;
    project?: string;
    readMask?: string;
    routineId: string;
}

export interface GetRoutineResult {
    /**
     * Optional.
     */
    readonly arguments: outputs.bigquery.v2.ArgumentResponse[];
    /**
     * The time when this routine was created, in milliseconds since the epoch.
     */
    readonly creationTime: string;
    /**
     * The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
     */
    readonly definitionBody: string;
    /**
     * Optional. The description of the routine, if defined.
     */
    readonly description: string;
    /**
     * Optional. The determinism level of the JavaScript UDF, if defined.
     */
    readonly determinismLevel: string;
    /**
     * A hash of this resource.
     */
    readonly etag: string;
    /**
     * Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
     */
    readonly importedLibraries: string[];
    /**
     * Optional. Defaults to "SQL".
     */
    readonly language: string;
    /**
     * The time when this routine was last modified, in milliseconds since the epoch.
     */
    readonly lastModifiedTime: string;
    /**
     * Optional. Can be set only if routine_type = "TABLE_VALUED_FUNCTION". If absent, the return table type is inferred from definition_body at query time in each query that references this routine. If present, then the columns in the evaluated table result will be cast to match the column types specificed in return table type, at query time.
     */
    readonly returnTableType: outputs.bigquery.v2.StandardSqlTableTypeResponse;
    /**
     * Optional if language = "SQL"; required otherwise. Cannot be set if routine_type = "TABLE_VALUED_FUNCTION". If absent, the return type is inferred from definition_body at query time in each query that references this routine. If present, then the evaluated result will be cast to the specified returned type at query time. For example, for the functions created with the following statements: * `CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);` * `CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));` * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1));` The return_type is `{type_kind: "FLOAT64"}` for `Add` and `Decrement`, and is absent for `Increment` (inferred as FLOAT64 at query time). Suppose the function `Add` is replaced by `CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y);` Then the inferred return type of `Increment` is automatically changed to INT64 at query time, while the return type of `Decrement` remains FLOAT64.
     */
    readonly returnType: outputs.bigquery.v2.StandardSqlDataTypeResponse;
    /**
     * Reference describing the ID of this routine.
     */
    readonly routineReference: outputs.bigquery.v2.RoutineReferenceResponse;
    /**
     * The type of routine.
     */
    readonly routineType: string;
    /**
     * Optional. Can be set for procedures only. If true (default), the definition body will be validated in the creation and the updates of the procedure. For procedures with an argument of ANY TYPE, the definition body validtion is not supported at creation/update time, and thus this field must be set to false explicitly.
     */
    readonly strictMode: boolean;
}

export function getRoutineOutput(args: GetRoutineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRoutineResult> {
    return pulumi.output(args).apply(a => getRoutine(a, opts))
}

export interface GetRoutineOutputArgs {
    datasetId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    readMask?: pulumi.Input<string>;
    routineId: pulumi.Input<string>;
}
