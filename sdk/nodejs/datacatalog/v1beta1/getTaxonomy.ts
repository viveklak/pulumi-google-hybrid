// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets a taxonomy.
 */
export function getTaxonomy(args: GetTaxonomyArgs, opts?: pulumi.InvokeOptions): Promise<GetTaxonomyResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:datacatalog/v1beta1:getTaxonomy", {
        "location": args.location,
        "project": args.project,
        "taxonomyId": args.taxonomyId,
    }, opts);
}

export interface GetTaxonomyArgs {
    location: string;
    project?: string;
    taxonomyId: string;
}

export interface GetTaxonomyResult {
    /**
     * Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
     */
    readonly activatedPolicyTypes: string[];
    /**
     * Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.
     */
    readonly description: string;
    /**
     * User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
     */
    readonly displayName: string;
    /**
     * Resource name of this taxonomy, whose format is: "projects/{project_number}/locations/{location_id}/taxonomies/{id}".
     */
    readonly name: string;
    /**
     * Number of policy tags contained in this taxonomy.
     */
    readonly policyTagCount: number;
    /**
     * Timestamps about this taxonomy. Only create_time and update_time are used.
     */
    readonly taxonomyTimestamps: outputs.datacatalog.v1beta1.GoogleCloudDatacatalogV1beta1SystemTimestampsResponse;
}

export function getTaxonomyOutput(args: GetTaxonomyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTaxonomyResult> {
    return pulumi.output(args).apply(a => getTaxonomy(a, opts))
}

export interface GetTaxonomyOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    taxonomyId: pulumi.Input<string>;
}
