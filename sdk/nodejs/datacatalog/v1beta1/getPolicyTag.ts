// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets a policy tag.
 */
export function getPolicyTag(args: GetPolicyTagArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyTagResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:datacatalog/v1beta1:getPolicyTag", {
        "location": args.location,
        "policyTagId": args.policyTagId,
        "project": args.project,
        "taxonomyId": args.taxonomyId,
    }, opts);
}

export interface GetPolicyTagArgs {
    location: string;
    policyTagId: string;
    project?: string;
    taxonomyId: string;
}

export interface GetPolicyTagResult {
    /**
     * Resource names of child policy tags of this policy tag.
     */
    readonly childPolicyTags: string[];
    /**
     * Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description.
     */
    readonly description: string;
    /**
     * User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8.
     */
    readonly displayName: string;
    /**
     * Resource name of this policy tag, whose format is: "projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}".
     */
    readonly name: string;
    /**
     * Resource name of this policy tag's parent policy tag (e.g. for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the "Geolocation" policy tag in the example above). If not set, defaults to an empty string.
     */
    readonly parentPolicyTag: string;
}

export function getPolicyTagOutput(args: GetPolicyTagOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyTagResult> {
    return pulumi.output(args).apply(a => getPolicyTag(a, opts))
}

export interface GetPolicyTagOutputArgs {
    location: pulumi.Input<string>;
    policyTagId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    taxonomyId: pulumi.Input<string>;
}
