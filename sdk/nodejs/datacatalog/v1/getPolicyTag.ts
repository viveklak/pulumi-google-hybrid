// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets a policy tag.
 */
export function getPolicyTag(args: GetPolicyTagArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyTagResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:datacatalog/v1:getPolicyTag", {
        "location": args.location,
        "policyTagId": args.policyTagId,
        "project": args.project,
        "taxonomyId": args.taxonomyId,
    }, opts);
}

export interface GetPolicyTagArgs {
    location: string;
    policyTagId: string;
    project?: string;
    taxonomyId: string;
}

export interface GetPolicyTagResult {
    /**
     * Resource names of child policy tags of this policy tag.
     */
    readonly childPolicyTags: string[];
    /**
     * Description of this policy tag. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
     */
    readonly description: string;
    /**
     * User-defined name of this policy tag. The name can't start or end with spaces and must be unique within the parent taxonomy, contain only Unicode letters, numbers, underscores, dashes and spaces, and be at most 200 bytes long when encoded in UTF-8.
     */
    readonly displayName: string;
    /**
     * Resource name of this policy tag in the URL format. The policy tag manager generates unique taxonomy IDs and policy tag IDs.
     */
    readonly name: string;
    /**
     * Resource name of this policy tag's parent policy tag. If empty, this is a top level tag. If not set, defaults to an empty string. For example, for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag, and, for "Geolocation", this field is empty.
     */
    readonly parentPolicyTag: string;
}

export function getPolicyTagOutput(args: GetPolicyTagOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyTagResult> {
    return pulumi.output(args).apply(a => getPolicyTag(a, opts))
}

export interface GetPolicyTagOutputArgs {
    location: pulumi.Input<string>;
    policyTagId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    taxonomyId: pulumi.Input<string>;
}
