// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Get a FeedbackMessage object.
 */
export function getFeedbackMessage(args: GetFeedbackMessageArgs, opts?: pulumi.InvokeOptions): Promise<GetFeedbackMessageResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:datalabeling/v1beta1:getFeedbackMessage", {
        "annotatedDatasetId": args.annotatedDatasetId,
        "datasetId": args.datasetId,
        "feedbackMessageId": args.feedbackMessageId,
        "feedbackThreadId": args.feedbackThreadId,
        "project": args.project,
    }, opts);
}

export interface GetFeedbackMessageArgs {
    annotatedDatasetId: string;
    datasetId: string;
    feedbackMessageId: string;
    feedbackThreadId: string;
    project?: string;
}

export interface GetFeedbackMessageResult {
    /**
     * String content of the feedback. Maximum of 10000 characters.
     */
    readonly body: string;
    /**
     * Create time.
     */
    readonly createTime: string;
    /**
     * The image storing this feedback if the feedback is an image representing operator's comments.
     */
    readonly image: string;
    /**
     * Name of the feedback message in a feedback thread. Format: 'project/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset_id}/feedbackThreads/{feedback_thread_id}/feedbackMessage/{feedback_message_id}'
     */
    readonly name: string;
    readonly operatorFeedbackMetadata: outputs.datalabeling.v1beta1.GoogleCloudDatalabelingV1beta1OperatorFeedbackMetadataResponse;
    readonly requesterFeedbackMetadata: outputs.datalabeling.v1beta1.GoogleCloudDatalabelingV1beta1RequesterFeedbackMetadataResponse;
}

export function getFeedbackMessageOutput(args: GetFeedbackMessageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeedbackMessageResult> {
    return pulumi.output(args).apply(a => getFeedbackMessage(a, opts))
}

export interface GetFeedbackMessageOutputArgs {
    annotatedDatasetId: pulumi.Input<string>;
    datasetId: pulumi.Input<string>;
    feedbackMessageId: pulumi.Input<string>;
    feedbackThreadId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
