// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Use this method to create a stream.
 * Auto-naming is currently not supported for this resource.
 */
export class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Stream {
        return new Stream(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:datastream/v1alpha1:Stream';

    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }

    /**
     * Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     */
    public readonly backfillAll!: pulumi.Output<outputs.datastream.v1alpha1.BackfillAllStrategyResponse>;
    /**
     * Do not automatically backfill any objects.
     */
    public readonly backfillNone!: pulumi.Output<outputs.datastream.v1alpha1.BackfillNoneStrategyResponse>;
    /**
     * The creation time of the stream.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     */
    public readonly customerManagedEncryptionKey!: pulumi.Output<string>;
    /**
     * Destination connection profile configuration.
     */
    public readonly destinationConfig!: pulumi.Output<outputs.datastream.v1alpha1.DestinationConfigResponse>;
    /**
     * Display name.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Errors on the Stream.
     */
    public /*out*/ readonly errors!: pulumi.Output<outputs.datastream.v1alpha1.ErrorResponse[]>;
    /**
     * Labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The stream's name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Source connection profile configuration.
     */
    public readonly sourceConfig!: pulumi.Output<outputs.datastream.v1alpha1.SourceConfigResponse>;
    /**
     * The state of the stream.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * The last update time of the stream.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Stream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.destinationConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationConfig'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.sourceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceConfig'");
            }
            if ((!args || args.streamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamId'");
            }
            resourceInputs["backfillAll"] = args ? args.backfillAll : undefined;
            resourceInputs["backfillNone"] = args ? args.backfillNone : undefined;
            resourceInputs["customerManagedEncryptionKey"] = args ? args.customerManagedEncryptionKey : undefined;
            resourceInputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["sourceConfig"] = args ? args.sourceConfig : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["streamId"] = args ? args.streamId : undefined;
            resourceInputs["validateOnly"] = args ? args.validateOnly : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["backfillAll"] = undefined /*out*/;
            resourceInputs["backfillNone"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["customerManagedEncryptionKey"] = undefined /*out*/;
            resourceInputs["destinationConfig"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["sourceConfig"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Stream resource.
 */
export interface StreamArgs {
    /**
     * Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
     */
    backfillAll?: pulumi.Input<inputs.datastream.v1alpha1.BackfillAllStrategyArgs>;
    /**
     * Do not automatically backfill any objects.
     */
    backfillNone?: pulumi.Input<inputs.datastream.v1alpha1.BackfillNoneStrategyArgs>;
    /**
     * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
     */
    customerManagedEncryptionKey?: pulumi.Input<string>;
    /**
     * Destination connection profile configuration.
     */
    destinationConfig: pulumi.Input<inputs.datastream.v1alpha1.DestinationConfigArgs>;
    /**
     * Display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Optional. Create the stream without validating it.
     */
    force?: pulumi.Input<string>;
    /**
     * Labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
     */
    requestId?: pulumi.Input<string>;
    /**
     * Source connection profile configuration.
     */
    sourceConfig: pulumi.Input<inputs.datastream.v1alpha1.SourceConfigArgs>;
    /**
     * The state of the stream.
     */
    state?: pulumi.Input<enums.datastream.v1alpha1.StreamState>;
    /**
     * Required. The stream identifier.
     */
    streamId: pulumi.Input<string>;
    /**
     * Optional. Only validate the stream, but do not create any resources. The default is false.
     */
    validateOnly?: pulumi.Input<string>;
}
