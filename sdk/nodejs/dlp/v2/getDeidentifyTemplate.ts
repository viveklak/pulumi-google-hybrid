// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.
 */
export function getDeidentifyTemplate(args: GetDeidentifyTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetDeidentifyTemplateResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:dlp/v2:getDeidentifyTemplate", {
        "deidentifyTemplateId": args.deidentifyTemplateId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDeidentifyTemplateArgs {
    deidentifyTemplateId: string;
    location: string;
    project?: string;
}

export interface GetDeidentifyTemplateResult {
    /**
     * The creation timestamp of an inspectTemplate.
     */
    readonly createTime: string;
    /**
     * The core content of the template.
     */
    readonly deidentifyConfig: outputs.dlp.v2.GooglePrivacyDlpV2DeidentifyConfigResponse;
    /**
     * Short description (max 256 chars).
     */
    readonly description: string;
    /**
     * Display name (max 256 chars).
     */
    readonly displayName: string;
    /**
     * The template name. The template will have one of the following formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`
     */
    readonly name: string;
    /**
     * The last update timestamp of an inspectTemplate.
     */
    readonly updateTime: string;
}

export function getDeidentifyTemplateOutput(args: GetDeidentifyTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeidentifyTemplateResult> {
    return pulumi.output(args).apply(a => getDeidentifyTemplate(a, opts))
}

export interface GetDeidentifyTemplateOutputArgs {
    deidentifyTemplateId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
