// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
 */
export function getDlpJob(args: GetDlpJobArgs, opts?: pulumi.InvokeOptions): Promise<GetDlpJobResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:dlp/v2:getDlpJob", {
        "dlpJobId": args.dlpJobId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetDlpJobArgs {
    dlpJobId: string;
    location: string;
    project?: string;
}

export interface GetDlpJobResult {
    /**
     * Time when the job was created.
     */
    readonly createTime: string;
    /**
     * Time when the job finished.
     */
    readonly endTime: string;
    /**
     * A stream of errors encountered running the job.
     */
    readonly errors: outputs.dlp.v2.GooglePrivacyDlpV2ErrorResponse[];
    /**
     * Results from inspecting a data source.
     */
    readonly inspectDetails: outputs.dlp.v2.GooglePrivacyDlpV2InspectDataSourceDetailsResponse;
    /**
     * If created by a job trigger, the resource name of the trigger that instantiated the job.
     */
    readonly jobTriggerName: string;
    /**
     * The server-assigned name.
     */
    readonly name: string;
    /**
     * Results from analyzing risk of a data source.
     */
    readonly riskDetails: outputs.dlp.v2.GooglePrivacyDlpV2AnalyzeDataSourceRiskDetailsResponse;
    /**
     * Time when the job started.
     */
    readonly startTime: string;
    /**
     * State of a job.
     */
    readonly state: string;
    /**
     * The type of job.
     */
    readonly type: string;
}

export function getDlpJobOutput(args: GetDlpJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDlpJobResult> {
    return pulumi.output(args).apply(a => getDlpJob(a, opts))
}

export interface GetDlpJobOutputArgs {
    dlpJobId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
