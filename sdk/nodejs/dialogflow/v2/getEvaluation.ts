// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets an evaluation of conversation model.
 */
export function getEvaluation(args: GetEvaluationArgs, opts?: pulumi.InvokeOptions): Promise<GetEvaluationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:dialogflow/v2:getEvaluation", {
        "conversationModelId": args.conversationModelId,
        "evaluationId": args.evaluationId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetEvaluationArgs {
    conversationModelId: string;
    evaluationId: string;
    location: string;
    project?: string;
}

export interface GetEvaluationResult {
    /**
     * Creation time of this model.
     */
    readonly createTime: string;
    /**
     * Optional. The display name of the model evaluation. At most 64 bytes long.
     */
    readonly displayName: string;
    /**
     * Optional. The configuration of the evaluation task.
     */
    readonly evaluationConfig: outputs.dialogflow.v2.GoogleCloudDialogflowV2EvaluationConfigResponse;
    /**
     * The resource name of the evaluation. Format: `projects//conversationModels//evaluations/`
     */
    readonly name: string;
    /**
     * Only available when model is for smart reply.
     */
    readonly smartReplyMetrics: outputs.dialogflow.v2.GoogleCloudDialogflowV2SmartReplyMetricsResponse;
}

export function getEvaluationOutput(args: GetEvaluationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEvaluationResult> {
    return pulumi.output(args).apply(a => getEvaluation(a, opts))
}

export interface GetEvaluationOutputArgs {
    conversationModelId: pulumi.Input<string>;
    evaluationId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
