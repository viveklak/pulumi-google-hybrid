// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Describes a job.
 */
export function getJob(args: GetJobArgs, opts?: pulumi.InvokeOptions): Promise<GetJobResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:ml/v1:getJob", {
        "jobId": args.jobId,
        "project": args.project,
    }, opts);
}

export interface GetJobArgs {
    jobId: string;
    project?: string;
}

export interface GetJobResult {
    /**
     * When the job was created.
     */
    readonly createTime: string;
    /**
     * When the job processing was completed.
     */
    readonly endTime: string;
    /**
     * The details of a failure or a cancellation.
     */
    readonly errorMessage: string;
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a job from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform job updates in order to avoid race conditions: An `etag` is returned in the response to `GetJob`, and systems are expected to put that etag in the request to `UpdateJob` to ensure that their change will be applied to the same version of the job.
     */
    readonly etag: string;
    /**
     * The user-specified id of the job.
     */
    readonly jobId: string;
    /**
     * It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.
     */
    readonly jobPosition: string;
    /**
     * Optional. One or more labels that you can add, to organize your jobs. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.
     */
    readonly labels: {[key: string]: string};
    /**
     * Input parameters to create a prediction job.
     */
    readonly predictionInput: outputs.ml.v1.GoogleCloudMlV1__PredictionInputResponse;
    /**
     * The current prediction job result.
     */
    readonly predictionOutput: outputs.ml.v1.GoogleCloudMlV1__PredictionOutputResponse;
    /**
     * When the job processing was started.
     */
    readonly startTime: string;
    /**
     * The detailed state of a job.
     */
    readonly state: string;
    /**
     * Input parameters to create a training job.
     */
    readonly trainingInput: outputs.ml.v1.GoogleCloudMlV1__TrainingInputResponse;
    /**
     * The current training job result.
     */
    readonly trainingOutput: outputs.ml.v1.GoogleCloudMlV1__TrainingOutputResponse;
}

export function getJobOutput(args: GetJobOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetJobResult> {
    return pulumi.output(args).apply(a => getJob(a, opts))
}

export interface GetJobOutputArgs {
    jobId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
