// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets a trial.
 */
export function getTrial(args: GetTrialArgs, opts?: pulumi.InvokeOptions): Promise<GetTrialResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:ml/v1:getTrial", {
        "location": args.location,
        "project": args.project,
        "studyId": args.studyId,
        "trialId": args.trialId,
    }, opts);
}

export interface GetTrialArgs {
    location: string;
    project?: string;
    studyId: string;
    trialId: string;
}

export interface GetTrialResult {
    /**
     * The identifier of the client that originally requested this trial.
     */
    readonly clientId: string;
    /**
     * Time at which the trial's status changed to COMPLETED.
     */
    readonly endTime: string;
    /**
     * The final measurement containing the objective value.
     */
    readonly finalMeasurement: outputs.ml.v1.GoogleCloudMlV1__MeasurementResponse;
    /**
     * A human readable string describing why the trial is infeasible. This should only be set if trial_infeasible is true.
     */
    readonly infeasibleReason: string;
    /**
     * A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_time). These are used for early stopping computations.
     */
    readonly measurements: outputs.ml.v1.GoogleCloudMlV1__MeasurementResponse[];
    /**
     * Name of the trial assigned by the service.
     */
    readonly name: string;
    /**
     * The parameters of the trial.
     */
    readonly parameters: outputs.ml.v1.GoogleCloudMlV1_Trial_ParameterResponse[];
    /**
     * Time at which the trial was started.
     */
    readonly startTime: string;
    /**
     * The detailed state of a trial.
     */
    readonly state: string;
    /**
     * If true, the parameters in this trial are not attempted again.
     */
    readonly trialInfeasible: boolean;
}

export function getTrialOutput(args: GetTrialOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrialResult> {
    return pulumi.output(args).apply(a => getTrial(a, opts))
}

export interface GetTrialOutputArgs {
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    studyId: pulumi.Input<string>;
    trialId: pulumi.Input<string>;
}
