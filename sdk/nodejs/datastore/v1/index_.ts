// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.
 * Auto-naming is currently not supported for this resource.
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:datastore/v1:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    /**
     * The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
     */
    public readonly ancestor!: pulumi.Output<string>;
    /**
     * The resource ID of the index.
     */
    public /*out*/ readonly indexId!: pulumi.Output<string>;
    /**
     * The entity kind to which this index applies.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Project ID.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * An ordered sequence of property names and their index attributes.
     */
    public readonly properties!: pulumi.Output<outputs.datastore.v1.GoogleDatastoreAdminV1IndexedPropertyResponse[]>;
    /**
     * The state of the index.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ancestor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ancestor'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            resourceInputs["ancestor"] = args ? args.ancestor : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["indexId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        } else {
            resourceInputs["ancestor"] = undefined /*out*/;
            resourceInputs["indexId"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Index.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
     */
    ancestor: pulumi.Input<enums.datastore.v1.IndexAncestor>;
    /**
     * The entity kind to which this index applies.
     */
    kind: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * An ordered sequence of property names and their index attributes.
     */
    properties: pulumi.Input<pulumi.Input<inputs.datastore.v1.GoogleDatastoreAdminV1IndexedPropertyArgs>[]>;
}
