// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Gateway.
 */
export function getGateway(args: GetGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetGatewayResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:networkservices/v1beta1:getGateway", {
        "gatewayId": args.gatewayId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetGatewayArgs {
    gatewayId: string;
    location: string;
    project?: string;
}

export interface GetGatewayResult {
    /**
     * The timestamp when the resource was created.
     */
    readonly createTime: string;
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    readonly description: string;
    /**
     * Optional. Set of label tags associated with the Gateway resource.
     */
    readonly labels: {[key: string]: string};
    /**
     * Name of the Gateway resource. It matches pattern `projects/*&#47;locations/global/gateways/`.
     */
    readonly name: string;
    /**
     * One or more ports that the Gateway must receive traffic on. The proxy binds to the ports specified. Gateway listen on 0.0.0.0 on the ports specified below.
     */
    readonly ports: number[];
    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     */
    readonly scope: string;
    /**
     * Server-defined URL of this resource
     */
    readonly selfLink: string;
    /**
     * Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     */
    readonly serverTlsPolicy: string;
    /**
     * Immutable. The type of the customer managed gateway.
     */
    readonly type: string;
    /**
     * The timestamp when the resource was updated.
     */
    readonly updateTime: string;
}

export function getGatewayOutput(args: GetGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGatewayResult> {
    return pulumi.output(args).apply(a => getGateway(a, opts))
}

export interface GetGatewayOutputArgs {
    gatewayId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
