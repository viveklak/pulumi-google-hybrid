// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new TcpRoute in a given project and location.
 */
export class TcpRoute extends pulumi.CustomResource {
    /**
     * Get an existing TcpRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TcpRoute {
        return new TcpRoute(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:networkservices/v1beta1:TcpRoute';

    /**
     * Returns true if the given object is an instance of TcpRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TcpRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TcpRoute.__pulumiType;
    }

    /**
     * The timestamp when the resource was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*&#47;locations/global/gateways/`
     */
    public readonly gateways!: pulumi.Output<string[]>;
    /**
     * Optional. Set of label tags associated with the TcpRoute resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*&#47;locations/global/meshes/` The attached Mesh should be of a type SIDECAR
     */
    public readonly meshes!: pulumi.Output<string[]>;
    /**
     * Name of the TcpRoute resource. It matches pattern `projects/*&#47;locations/global/tcpRoutes/tcp_route_name>`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
     */
    public readonly rules!: pulumi.Output<outputs.networkservices.v1beta1.TcpRouteRouteRuleResponse[]>;
    /**
     * Server-defined URL of this resource
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * The timestamp when the resource was updated.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a TcpRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TcpRouteArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.tcpRouteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tcpRouteId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["meshes"] = args ? args.meshes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["tcpRouteId"] = args ? args.tcpRouteId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        } else {
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["gateways"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["meshes"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TcpRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a TcpRoute resource.
 */
export interface TcpRouteArgs {
    /**
     * Optional. A free-text description of the resource. Max length 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*&#47;locations/global/gateways/`
     */
    gateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional. Set of label tags associated with the TcpRoute resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    /**
     * Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*&#47;locations/global/meshes/` The attached Mesh should be of a type SIDECAR
     */
    meshes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the TcpRoute resource. It matches pattern `projects/*&#47;locations/global/tcpRoutes/tcp_route_name>`.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
     */
    rules: pulumi.Input<pulumi.Input<inputs.networkservices.v1beta1.TcpRouteRouteRuleArgs>[]>;
    /**
     * Required. Short name of the TcpRoute resource to be created. E.g. TODO(Add an example).
     */
    tcpRouteId: pulumi.Input<string>;
}
