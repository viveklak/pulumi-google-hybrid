// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets a schema.
 */
export function getSchema(args: GetSchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:pubsub/v1:getSchema", {
        "project": args.project,
        "schemaId": args.schemaId,
        "view": args.view,
    }, opts);
}

export interface GetSchemaArgs {
    project?: string;
    schemaId: string;
    view?: string;
}

export interface GetSchemaResult {
    /**
     * The definition of the schema. This should contain a string representing the full definition of the schema that is a valid schema definition of the type specified in `type`.
     */
    readonly definition: string;
    /**
     * Name of the schema. Format is `projects/{project}/schemas/{schema}`.
     */
    readonly name: string;
    /**
     * The timestamp that the revision was created.
     */
    readonly revisionCreateTime: string;
    /**
     * Immutable. The revision ID of the schema.
     */
    readonly revisionId: string;
    /**
     * The type of the schema definition.
     */
    readonly type: string;
}

export function getSchemaOutput(args: GetSchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaResult> {
    return pulumi.output(args).apply(a => getSchema(a, opts))
}

export interface GetSchemaOutputArgs {
    project?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}
