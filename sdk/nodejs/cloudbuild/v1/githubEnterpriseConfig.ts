// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create an association between a GCP project and a GitHub Enterprise server.
 */
export class GithubEnterpriseConfig extends pulumi.CustomResource {
    /**
     * Get an existing GithubEnterpriseConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GithubEnterpriseConfig {
        return new GithubEnterpriseConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:cloudbuild/v1:GithubEnterpriseConfig';

    /**
     * Returns true if the given object is an instance of GithubEnterpriseConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GithubEnterpriseConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GithubEnterpriseConfig.__pulumiType;
    }

    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Time when the installation was associated with the project.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Name to display for this config.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The URL of the github enterprise host the configuration is for.
     */
    public readonly hostUrl!: pulumi.Output<string>;
    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     */
    public readonly peeredNetwork!: pulumi.Output<string>;
    /**
     * Names of secrets in Secret Manager.
     */
    public readonly secrets!: pulumi.Output<outputs.cloudbuild.v1.GitHubEnterpriseSecretsResponse>;
    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     */
    public readonly sslCa!: pulumi.Output<string>;
    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     */
    public readonly webhookKey!: pulumi.Output<string>;

    /**
     * Create a GithubEnterpriseConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GithubEnterpriseConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["gheConfigId"] = args ? args.gheConfigId : undefined;
            resourceInputs["hostUrl"] = args ? args.hostUrl : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peeredNetwork"] = args ? args.peeredNetwork : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["sslCa"] = args ? args.sslCa : undefined;
            resourceInputs["webhookKey"] = args ? args.webhookKey : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        } else {
            resourceInputs["appId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["hostUrl"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["peeredNetwork"] = undefined /*out*/;
            resourceInputs["secrets"] = undefined /*out*/;
            resourceInputs["sslCa"] = undefined /*out*/;
            resourceInputs["webhookKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GithubEnterpriseConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GithubEnterpriseConfig resource.
 */
export interface GithubEnterpriseConfigArgs {
    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     */
    appId: pulumi.Input<string>;
    /**
     * Name to display for this config.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfigâ€™s resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
     */
    gheConfigId?: pulumi.Input<string>;
    /**
     * The URL of the github enterprise host the configuration is for.
     */
    hostUrl?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     */
    name?: pulumi.Input<string>;
    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     */
    peeredNetwork?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * ID of the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Names of secrets in Secret Manager.
     */
    secrets?: pulumi.Input<inputs.cloudbuild.v1.GitHubEnterpriseSecretsArgs>;
    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     */
    sslCa?: pulumi.Input<string>;
    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     */
    webhookKey?: pulumi.Input<string>;
}
