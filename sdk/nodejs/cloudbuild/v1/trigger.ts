// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new `BuildTrigger`. This API is experimental.
 */
export class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Trigger {
        return new Trigger(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:cloudbuild/v1:Trigger';

    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }

    /**
     * Configuration for manual approval to start a build invocation of this BuildTrigger.
     */
    public readonly approvalConfig!: pulumi.Output<outputs.cloudbuild.v1.ApprovalConfigResponse>;
    /**
     * Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
     */
    public readonly autodetect!: pulumi.Output<boolean>;
    /**
     * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
     */
    public readonly bitbucketServerTriggerConfig!: pulumi.Output<outputs.cloudbuild.v1.BitbucketServerTriggerConfigResponse>;
    /**
     * Contents of the build template.
     */
    public readonly build!: pulumi.Output<outputs.cloudbuild.v1.BuildResponse>;
    /**
     * Time when the trigger was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Human-readable description of this trigger.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * If true, the trigger will never automatically execute a build.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
     */
    public readonly eventType!: pulumi.Output<string>;
    /**
     * Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
     */
    public readonly filename!: pulumi.Output<string>;
    /**
     * A Common Expression Language string.
     */
    public readonly filter!: pulumi.Output<string>;
    /**
     * The file source describing the local or remote Build template.
     */
    public readonly gitFileSource!: pulumi.Output<outputs.cloudbuild.v1.GitFileSourceResponse>;
    /**
     * GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
     */
    public readonly github!: pulumi.Output<outputs.cloudbuild.v1.GitHubEventsConfigResponse>;
    /**
     * ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
     */
    public readonly ignoredFiles!: pulumi.Output<string[]>;
    /**
     * If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
     */
    public readonly includedFiles!: pulumi.Output<string[]>;
    /**
     * User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
     */
    public readonly pubsubConfig!: pulumi.Output<outputs.cloudbuild.v1.PubsubConfigResponse>;
    /**
     * The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
     */
    public readonly resourceName!: pulumi.Output<string>;
    /**
     * The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
     */
    public readonly serviceAccount!: pulumi.Output<string>;
    /**
     * The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
     */
    public readonly sourceToBuild!: pulumi.Output<outputs.cloudbuild.v1.GitRepoSourceResponse>;
    /**
     * Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
     */
    public readonly substitutions!: pulumi.Output<{[key: string]: string}>;
    /**
     * Tags for annotation of a `BuildTrigger`
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
     */
    public readonly triggerTemplate!: pulumi.Output<outputs.cloudbuild.v1.RepoSourceResponse>;
    /**
     * WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
     */
    public readonly webhookConfig!: pulumi.Output<outputs.cloudbuild.v1.WebhookConfigResponse>;

    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["approvalConfig"] = args ? args.approvalConfig : undefined;
            resourceInputs["autodetect"] = args ? args.autodetect : undefined;
            resourceInputs["bitbucketServerTriggerConfig"] = args ? args.bitbucketServerTriggerConfig : undefined;
            resourceInputs["build"] = args ? args.build : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["gitFileSource"] = args ? args.gitFileSource : undefined;
            resourceInputs["github"] = args ? args.github : undefined;
            resourceInputs["ignoredFiles"] = args ? args.ignoredFiles : undefined;
            resourceInputs["includedFiles"] = args ? args.includedFiles : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["pubsubConfig"] = args ? args.pubsubConfig : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["sourceToBuild"] = args ? args.sourceToBuild : undefined;
            resourceInputs["substitutions"] = args ? args.substitutions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["triggerTemplate"] = args ? args.triggerTemplate : undefined;
            resourceInputs["webhookConfig"] = args ? args.webhookConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        } else {
            resourceInputs["approvalConfig"] = undefined /*out*/;
            resourceInputs["autodetect"] = undefined /*out*/;
            resourceInputs["bitbucketServerTriggerConfig"] = undefined /*out*/;
            resourceInputs["build"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
            resourceInputs["eventType"] = undefined /*out*/;
            resourceInputs["filename"] = undefined /*out*/;
            resourceInputs["filter"] = undefined /*out*/;
            resourceInputs["gitFileSource"] = undefined /*out*/;
            resourceInputs["github"] = undefined /*out*/;
            resourceInputs["ignoredFiles"] = undefined /*out*/;
            resourceInputs["includedFiles"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["pubsubConfig"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
            resourceInputs["serviceAccount"] = undefined /*out*/;
            resourceInputs["sourceToBuild"] = undefined /*out*/;
            resourceInputs["substitutions"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["triggerTemplate"] = undefined /*out*/;
            resourceInputs["webhookConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Trigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    /**
     * Configuration for manual approval to start a build invocation of this BuildTrigger.
     */
    approvalConfig?: pulumi.Input<inputs.cloudbuild.v1.ApprovalConfigArgs>;
    /**
     * Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
     */
    autodetect?: pulumi.Input<boolean>;
    /**
     * BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
     */
    bitbucketServerTriggerConfig?: pulumi.Input<inputs.cloudbuild.v1.BitbucketServerTriggerConfigArgs>;
    /**
     * Contents of the build template.
     */
    build?: pulumi.Input<inputs.cloudbuild.v1.BuildArgs>;
    /**
     * Human-readable description of this trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * If true, the trigger will never automatically execute a build.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
     */
    eventType?: pulumi.Input<enums.cloudbuild.v1.TriggerEventType>;
    /**
     * Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
     */
    filename?: pulumi.Input<string>;
    /**
     * A Common Expression Language string.
     */
    filter?: pulumi.Input<string>;
    /**
     * The file source describing the local or remote Build template.
     */
    gitFileSource?: pulumi.Input<inputs.cloudbuild.v1.GitFileSourceArgs>;
    /**
     * GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
     */
    github?: pulumi.Input<inputs.cloudbuild.v1.GitHubEventsConfigArgs>;
    /**
     * ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
     */
    ignoredFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
     */
    includedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    /**
     * User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Required. ID of the project for which to configure automatic builds.
     */
    projectId: pulumi.Input<string>;
    /**
     * PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
     */
    pubsubConfig?: pulumi.Input<inputs.cloudbuild.v1.PubsubConfigArgs>;
    /**
     * The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
     */
    serviceAccount?: pulumi.Input<string>;
    /**
     * The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
     */
    sourceToBuild?: pulumi.Input<inputs.cloudbuild.v1.GitRepoSourceArgs>;
    /**
     * Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
     */
    substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Tags for annotation of a `BuildTrigger`
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
     */
    triggerTemplate?: pulumi.Input<inputs.cloudbuild.v1.RepoSourceArgs>;
    /**
     * WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
     */
    webhookConfig?: pulumi.Input<inputs.cloudbuild.v1.WebhookConfigArgs>;
}
