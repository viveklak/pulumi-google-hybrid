// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new `BitbucketServerConfig`. This API is experimental.
 */
export class BitbucketServerConfig extends pulumi.CustomResource {
    /**
     * Get an existing BitbucketServerConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): BitbucketServerConfig {
        return new BitbucketServerConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:cloudbuild/v1:BitbucketServerConfig';

    /**
     * Returns true if the given object is an instance of BitbucketServerConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BitbucketServerConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BitbucketServerConfig.__pulumiType;
    }

    /**
     * Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * Connected Bitbucket Server repositories for this config.
     */
    public /*out*/ readonly connectedRepositories!: pulumi.Output<outputs.cloudbuild.v1.BitbucketServerRepositoryIdResponse[]>;
    /**
     * Time when the config was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    public readonly hostUri!: pulumi.Output<string>;
    /**
     * The resource name for the config.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     */
    public readonly peeredNetwork!: pulumi.Output<string>;
    /**
     * Secret Manager secrets needed by the config.
     */
    public readonly secrets!: pulumi.Output<outputs.cloudbuild.v1.BitbucketServerSecretsResponse>;
    /**
     * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     */
    public readonly sslCa!: pulumi.Output<string>;
    /**
     * Username of the account Cloud Build will use on Bitbucket Server.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * UUID included in webhook requests. The UUID is used to look up the corresponding config.
     */
    public /*out*/ readonly webhookKey!: pulumi.Output<string>;

    /**
     * Create a BitbucketServerConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BitbucketServerConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.hostUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostUri'");
            }
            if ((!args || args.secrets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secrets'");
            }
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["bitbucketServerConfigId"] = args ? args.bitbucketServerConfigId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["hostUri"] = args ? args.hostUri : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peeredNetwork"] = args ? args.peeredNetwork : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["sslCa"] = args ? args.sslCa : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["connectedRepositories"] = undefined /*out*/;
            resourceInputs["webhookKey"] = undefined /*out*/;
        } else {
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["connectedRepositories"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["hostUri"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["peeredNetwork"] = undefined /*out*/;
            resourceInputs["secrets"] = undefined /*out*/;
            resourceInputs["sslCa"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
            resourceInputs["webhookKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BitbucketServerConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a BitbucketServerConfig resource.
 */
export interface BitbucketServerConfigArgs {
    /**
     * Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
     */
    bitbucketServerConfigId?: pulumi.Input<string>;
    /**
     * Time when the config was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
     */
    hostUri: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The resource name for the config.
     */
    name?: pulumi.Input<string>;
    /**
     * Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     */
    peeredNetwork?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Secret Manager secrets needed by the config.
     */
    secrets: pulumi.Input<inputs.cloudbuild.v1.BitbucketServerSecretsArgs>;
    /**
     * Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
     */
    sslCa?: pulumi.Input<string>;
    /**
     * Username of the account Cloud Build will use on Bitbucket Server.
     */
    username?: pulumi.Input<string>;
}
