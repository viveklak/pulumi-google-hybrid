// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Retrieve a GitHubEnterpriseConfig.
 */
export function getGithubEnterpriseConfig(args: GetGithubEnterpriseConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetGithubEnterpriseConfigResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:cloudbuild/v1:getGithubEnterpriseConfig", {
        "configId": args.configId,
        "githubEnterpriseConfigId": args.githubEnterpriseConfigId,
        "location": args.location,
        "project": args.project,
        "projectId": args.projectId,
    }, opts);
}

export interface GetGithubEnterpriseConfigArgs {
    configId?: string;
    githubEnterpriseConfigId: string;
    location: string;
    project?: string;
    projectId?: string;
}

export interface GetGithubEnterpriseConfigResult {
    /**
     * The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
     */
    readonly appId: string;
    /**
     * Time when the installation was associated with the project.
     */
    readonly createTime: string;
    /**
     * Name to display for this config.
     */
    readonly displayName: string;
    /**
     * The URL of the github enterprise host the configuration is for.
     */
    readonly hostUrl: string;
    /**
     * Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
     */
    readonly name: string;
    /**
     * Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
     */
    readonly peeredNetwork: string;
    /**
     * Names of secrets in Secret Manager.
     */
    readonly secrets: outputs.cloudbuild.v1.GitHubEnterpriseSecretsResponse;
    /**
     * Optional. SSL certificate to use for requests to GitHub Enterprise.
     */
    readonly sslCa: string;
    /**
     * The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
     */
    readonly webhookKey: string;
}

export function getGithubEnterpriseConfigOutput(args: GetGithubEnterpriseConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGithubEnterpriseConfigResult> {
    return pulumi.output(args).apply(a => getGithubEnterpriseConfig(a, opts))
}

export interface GetGithubEnterpriseConfigOutputArgs {
    configId?: pulumi.Input<string>;
    githubEnterpriseConfigId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
}
