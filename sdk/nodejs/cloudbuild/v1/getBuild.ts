// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.
 */
export function getBuild(args: GetBuildArgs, opts?: pulumi.InvokeOptions): Promise<GetBuildResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:cloudbuild/v1:getBuild", {
        "buildId": args.buildId,
        "id": args.id,
        "location": args.location,
        "project": args.project,
        "projectId": args.projectId,
    }, opts);
}

export interface GetBuildArgs {
    buildId: string;
    id: string;
    location: string;
    project?: string;
    projectId: string;
}

export interface GetBuildResult {
    /**
     * Describes this build's approval configuration, status, and result.
     */
    readonly approval: outputs.cloudbuild.v1.BuildApprovalResponse;
    /**
     * Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
     */
    readonly artifacts: outputs.cloudbuild.v1.ArtifactsResponse;
    /**
     * Secrets and secret environment variables.
     */
    readonly availableSecrets: outputs.cloudbuild.v1.SecretsResponse;
    /**
     * The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
     */
    readonly buildTriggerId: string;
    /**
     * Time at which the request to create the build was received.
     */
    readonly createTime: string;
    /**
     * Contains information about the build when status=FAILURE.
     */
    readonly failureInfo: outputs.cloudbuild.v1.FailureInfoResponse;
    /**
     * Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
     */
    readonly finishTime: string;
    /**
     * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
     */
    readonly images: string[];
    /**
     * URL to logs for this build in Google Cloud Console.
     */
    readonly logUrl: string;
    /**
     * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
     */
    readonly logsBucket: string;
    /**
     * The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
     */
    readonly name: string;
    /**
     * Special options for this build.
     */
    readonly options: outputs.cloudbuild.v1.BuildOptionsResponse;
    /**
     * ID of the project.
     */
    readonly project: string;
    /**
     * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
     */
    readonly queueTtl: string;
    /**
     * Results of the build.
     */
    readonly results: outputs.cloudbuild.v1.ResultsResponse;
    /**
     * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
     */
    readonly secrets: outputs.cloudbuild.v1.SecretResponse[];
    /**
     * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
     */
    readonly serviceAccount: string;
    /**
     * The location of the source files to build.
     */
    readonly source: outputs.cloudbuild.v1.SourceResponse;
    /**
     * A permanent fixed identifier for source.
     */
    readonly sourceProvenance: outputs.cloudbuild.v1.SourceProvenanceResponse;
    /**
     * Time at which execution of the build was started.
     */
    readonly startTime: string;
    /**
     * Status of the build.
     */
    readonly status: string;
    /**
     * Customer-readable message about the current status.
     */
    readonly statusDetail: string;
    /**
     * The operations to be performed on the workspace.
     */
    readonly steps: outputs.cloudbuild.v1.BuildStepResponse[];
    /**
     * Substitutions data for `Build` resource.
     */
    readonly substitutions: {[key: string]: string};
    /**
     * Tags for annotation of a `Build`. These are not docker tags.
     */
    readonly tags: string[];
    /**
     * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
     */
    readonly timeout: string;
    /**
     * Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
     */
    readonly timing: {[key: string]: string};
    /**
     * Non-fatal problems encountered during the execution of the build.
     */
    readonly warnings: outputs.cloudbuild.v1.WarningResponse[];
}

export function getBuildOutput(args: GetBuildOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBuildResult> {
    return pulumi.output(args).apply(a => getBuild(a, opts))
}

export interface GetBuildOutputArgs {
    buildId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
