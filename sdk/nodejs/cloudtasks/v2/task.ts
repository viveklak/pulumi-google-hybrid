// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * The maximum task size is 100KB.
 */
export class Task extends pulumi.CustomResource {
    /**
     * Get an existing Task resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Task {
        return new Task(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:cloudtasks/v2:Task';

    /**
     * Returns true if the given object is an instance of Task.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Task {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Task.__pulumiType;
    }

    /**
     * HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
     */
    public readonly appEngineHttpRequest!: pulumi.Output<outputs.cloudtasks.v2.AppEngineHttpRequestResponse>;
    /**
     * The time that the task was created. `create_time` will be truncated to the nearest second.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The number of attempts dispatched. This count includes attempts which have been dispatched but haven't received a response.
     */
    public /*out*/ readonly dispatchCount!: pulumi.Output<number>;
    /**
     * The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
     */
    public readonly dispatchDeadline!: pulumi.Output<string>;
    /**
     * The status of the task's first attempt. Only dispatch_time will be set. The other Attempt information is not retained by Cloud Tasks.
     */
    public /*out*/ readonly firstAttempt!: pulumi.Output<outputs.cloudtasks.v2.AttemptResponse>;
    /**
     * HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
     */
    public readonly httpRequest!: pulumi.Output<outputs.cloudtasks.v2.HttpRequestResponse>;
    /**
     * The status of the task's last attempt.
     */
    public /*out*/ readonly lastAttempt!: pulumi.Output<outputs.cloudtasks.v2.AttemptResponse>;
    /**
     * Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of attempts which have received a response.
     */
    public /*out*/ readonly responseCount!: pulumi.Output<number>;
    /**
     * The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
     */
    public readonly scheduleTime!: pulumi.Output<string>;
    /**
     * The view specifies which subset of the Task has been returned.
     */
    public /*out*/ readonly view!: pulumi.Output<string>;

    /**
     * Create a Task resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.queueId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueId'");
            }
            resourceInputs["appEngineHttpRequest"] = args ? args.appEngineHttpRequest : undefined;
            resourceInputs["dispatchDeadline"] = args ? args.dispatchDeadline : undefined;
            resourceInputs["httpRequest"] = args ? args.httpRequest : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["queueId"] = args ? args.queueId : undefined;
            resourceInputs["responseView"] = args ? args.responseView : undefined;
            resourceInputs["scheduleTime"] = args ? args.scheduleTime : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dispatchCount"] = undefined /*out*/;
            resourceInputs["firstAttempt"] = undefined /*out*/;
            resourceInputs["lastAttempt"] = undefined /*out*/;
            resourceInputs["responseCount"] = undefined /*out*/;
            resourceInputs["view"] = undefined /*out*/;
        } else {
            resourceInputs["appEngineHttpRequest"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dispatchCount"] = undefined /*out*/;
            resourceInputs["dispatchDeadline"] = undefined /*out*/;
            resourceInputs["firstAttempt"] = undefined /*out*/;
            resourceInputs["httpRequest"] = undefined /*out*/;
            resourceInputs["lastAttempt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["responseCount"] = undefined /*out*/;
            resourceInputs["scheduleTime"] = undefined /*out*/;
            resourceInputs["view"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Task.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Task resource.
 */
export interface TaskArgs {
    /**
     * HTTP request that is sent to the App Engine app handler. An App Engine task is a task that has AppEngineHttpRequest set.
     */
    appEngineHttpRequest?: pulumi.Input<inputs.cloudtasks.v2.AppEngineHttpRequestArgs>;
    /**
     * The deadline for requests sent to the worker. If the worker does not respond by this deadline then the request is cancelled and the attempt is marked as a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to the RetryConfig. Note that when the request is cancelled, Cloud Tasks will stop listening for the response, but whether the worker stops processing depends on the worker. For example, if the worker is stuck, it may not react to cancelled requests. The default and maximum values depend on the type of request: * For HTTP tasks, the default is 10 minutes. The deadline must be in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0 indicates that the request has the default deadline. The default deadline depends on the [scaling type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling) of the service: 10 minutes for standard apps with automatic scaling, 24 hours for standard apps with manual and basic scaling, and 60 minutes for flex apps. If the request deadline is set, it must be in the interval [15 seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`, the app handler will not run for longer than than the service's timeout. We recommend setting the `dispatch_deadline` to at most a few seconds more than the app handler's timeout. For more information see [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts). `dispatch_deadline` will be truncated to the nearest millisecond. The deadline is an approximate deadline.
     */
    dispatchDeadline?: pulumi.Input<string>;
    /**
     * HTTP request that is sent to the worker. An HTTP task is a task that has HttpRequest set.
     */
    httpRequest?: pulumi.Input<inputs.cloudtasks.v2.HttpRequestArgs>;
    location?: pulumi.Input<string>;
    /**
     * Optionally caller-specified in CreateTask. The task name. The task name must have the following format: `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or periods (.). For more information, see [Identifying projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects) * `LOCATION_ID` is the canonical ID for the task's location. The list of available locations can be obtained by calling ListLocations. For more information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]), numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500 characters.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    queueId: pulumi.Input<string>;
    /**
     * The response_view specifies which subset of the Task will be returned. By default response_view is BASIC; not all information is retrieved by default because some data, such as payloads, might be desirable to return only when needed because of its large size or because of the sensitivity of data that it contains. Authorization for FULL requires `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
     */
    responseView?: pulumi.Input<enums.cloudtasks.v2.TaskResponseView>;
    /**
     * The time when the task is scheduled to be attempted or retried. `schedule_time` will be truncated to the nearest microsecond.
     */
    scheduleTime?: pulumi.Input<string>;
}
