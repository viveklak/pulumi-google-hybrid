// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a pipeline that can be run later. Create takes a Pipeline that has all fields other than `pipelineId` populated, and then returns the same pipeline with `pipelineId` populated. This id can be used to run the pipeline. Caller must have WRITE permission to the project.
 */
export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:genomics/v1alpha2:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    /**
     * User-specified description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the docker run information.
     */
    public readonly docker!: pulumi.Output<outputs.genomics.v1alpha2.DockerExecutorResponse>;
    /**
     * Input parameters of the pipeline.
     */
    public readonly inputParameters!: pulumi.Output<outputs.genomics.v1alpha2.PipelineParameterResponse[]>;
    /**
     * A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Output parameters of the pipeline.
     */
    public readonly outputParameters!: pulumi.Output<outputs.genomics.v1alpha2.PipelineParameterResponse[]>;
    /**
     * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
     */
    public readonly pipelineId!: pulumi.Output<string>;
    /**
     * The project in which to create the pipeline. The caller must have WRITE access.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
     */
    public readonly resources!: pulumi.Output<outputs.genomics.v1alpha2.PipelineResourcesResponse>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["docker"] = args ? args.docker : undefined;
            resourceInputs["inputParameters"] = args ? args.inputParameters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputParameters"] = args ? args.outputParameters : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
        } else {
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["docker"] = undefined /*out*/;
            resourceInputs["inputParameters"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["outputParameters"] = undefined /*out*/;
            resourceInputs["pipelineId"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["resources"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    /**
     * User-specified description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the docker run information.
     */
    docker?: pulumi.Input<inputs.genomics.v1alpha2.DockerExecutorArgs>;
    /**
     * Input parameters of the pipeline.
     */
    inputParameters?: pulumi.Input<pulumi.Input<inputs.genomics.v1alpha2.PipelineParameterArgs>[]>;
    /**
     * A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
     */
    name?: pulumi.Input<string>;
    /**
     * Output parameters of the pipeline.
     */
    outputParameters?: pulumi.Input<pulumi.Input<inputs.genomics.v1alpha2.PipelineParameterArgs>[]>;
    /**
     * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
     */
    pipelineId?: pulumi.Input<string>;
    /**
     * The project in which to create the pipeline. The caller must have WRITE access.
     */
    project?: pulumi.Input<string>;
    /**
     * Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
     */
    resources: pulumi.Input<inputs.genomics.v1alpha2.PipelineResourcesArgs>;
}
