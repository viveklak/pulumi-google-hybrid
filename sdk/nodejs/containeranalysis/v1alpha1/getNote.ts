// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Returns the requested `Note`.
 */
export function getNote(args: GetNoteArgs, opts?: pulumi.InvokeOptions): Promise<GetNoteResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:containeranalysis/v1alpha1:getNote", {
        "noteId": args.noteId,
        "project": args.project,
    }, opts);
}

export interface GetNoteArgs {
    noteId: string;
    project?: string;
}

export interface GetNoteResult {
    /**
     * A note describing an attestation role.
     */
    readonly attestationAuthority: outputs.containeranalysis.v1alpha1.AttestationAuthorityResponse;
    /**
     * A note describing a base image.
     */
    readonly baseImage: outputs.containeranalysis.v1alpha1.BasisResponse;
    /**
     * Build provenance type for a verifiable build.
     */
    readonly buildType: outputs.containeranalysis.v1alpha1.BuildTypeResponse;
    /**
     * A note describing a compliance check.
     */
    readonly compliance: outputs.containeranalysis.v1alpha1.ComplianceNoteResponse;
    /**
     * The time this note was created. This field can be used as a filter in list requests.
     */
    readonly createTime: string;
    /**
     * A note describing something that can be deployed.
     */
    readonly deployable: outputs.containeranalysis.v1alpha1.DeployableResponse;
    /**
     * A note describing a provider/analysis type.
     */
    readonly discovery: outputs.containeranalysis.v1alpha1.DiscoveryResponse;
    /**
     * A note describing a dsse attestation note.
     */
    readonly dsseAttestation: outputs.containeranalysis.v1alpha1.DSSEAttestationNoteResponse;
    /**
     * Time of expiration for this note, null if note does not expire.
     */
    readonly expirationTime: string;
    /**
     * This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.
     */
    readonly kind: string;
    /**
     * A detailed description of this `Note`.
     */
    readonly longDescription: string;
    /**
     * The name of the note in the form "projects/{provider_project_id}/notes/{NOTE_ID}"
     */
    readonly name: string;
    /**
     * A note describing a package hosted by various package managers.
     */
    readonly package: outputs.containeranalysis.v1alpha1.PackageResponse;
    /**
     * URLs associated with this note
     */
    readonly relatedUrl: outputs.containeranalysis.v1alpha1.RelatedUrlResponse[];
    /**
     * A note describing a software bill of materials.
     */
    readonly sbom: outputs.containeranalysis.v1alpha1.DocumentNoteResponse;
    /**
     * A one sentence description of this `Note`.
     */
    readonly shortDescription: string;
    /**
     * A note describing an SPDX File.
     */
    readonly spdxFile: outputs.containeranalysis.v1alpha1.FileNoteResponse;
    /**
     * A note describing an SPDX Package.
     */
    readonly spdxPackage: outputs.containeranalysis.v1alpha1.PackageInfoNoteResponse;
    /**
     * A note describing a relationship between SPDX elements.
     */
    readonly spdxRelationship: outputs.containeranalysis.v1alpha1.RelationshipNoteResponse;
    /**
     * The time this note was last updated. This field can be used as a filter in list requests.
     */
    readonly updateTime: string;
    /**
     * A note describing an upgrade.
     */
    readonly upgrade: outputs.containeranalysis.v1alpha1.UpgradeNoteResponse;
    /**
     * A package vulnerability type of note.
     */
    readonly vulnerabilityType: outputs.containeranalysis.v1alpha1.VulnerabilityTypeResponse;
}

export function getNoteOutput(args: GetNoteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNoteResult> {
    return pulumi.output(args).apply(a => getNote(a, opts))
}

export interface GetNoteOutputArgs {
    noteId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
