// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Create a ServiceLevelObjective for the given Service.
 * Auto-naming is currently not supported for this resource.
 */
export class ServiceLevelObjective extends pulumi.CustomResource {
    /**
     * Get an existing ServiceLevelObjective resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ServiceLevelObjective {
        return new ServiceLevelObjective(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:monitoring/v3:ServiceLevelObjective';

    /**
     * Returns true if the given object is an instance of ServiceLevelObjective.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceLevelObjective {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceLevelObjective.__pulumiType;
    }

    /**
     * A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
     */
    public readonly calendarPeriod!: pulumi.Output<string>;
    /**
     * Name used for UI elements listing this SLO.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
     */
    public readonly goal!: pulumi.Output<number>;
    /**
     * Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
     */
    public readonly rollingPeriod!: pulumi.Output<string>;
    /**
     * The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
     */
    public readonly serviceLevelIndicator!: pulumi.Output<outputs.monitoring.v3.ServiceLevelIndicatorResponse>;
    /**
     * Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
     */
    public readonly userLabels!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ServiceLevelObjective resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceLevelObjectiveArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.v3Id === undefined) && !opts.urn) {
                throw new Error("Missing required property 'v3Id'");
            }
            if ((!args || args.v3Id1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'v3Id1'");
            }
            resourceInputs["calendarPeriod"] = args ? args.calendarPeriod : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["goal"] = args ? args.goal : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rollingPeriod"] = args ? args.rollingPeriod : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["serviceLevelIndicator"] = args ? args.serviceLevelIndicator : undefined;
            resourceInputs["serviceLevelObjectiveId"] = args ? args.serviceLevelObjectiveId : undefined;
            resourceInputs["userLabels"] = args ? args.userLabels : undefined;
            resourceInputs["v3Id"] = args ? args.v3Id : undefined;
            resourceInputs["v3Id1"] = args ? args.v3Id1 : undefined;
        } else {
            resourceInputs["calendarPeriod"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["goal"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["rollingPeriod"] = undefined /*out*/;
            resourceInputs["serviceLevelIndicator"] = undefined /*out*/;
            resourceInputs["userLabels"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceLevelObjective.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ServiceLevelObjective resource.
 */
export interface ServiceLevelObjectiveArgs {
    /**
     * A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
     */
    calendarPeriod?: pulumi.Input<enums.monitoring.v3.ServiceLevelObjectiveCalendarPeriod>;
    /**
     * Name used for UI elements listing this SLO.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
     */
    goal?: pulumi.Input<number>;
    /**
     * Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] 
     */
    name?: pulumi.Input<string>;
    /**
     * A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
     */
    rollingPeriod?: pulumi.Input<string>;
    serviceId: pulumi.Input<string>;
    /**
     * The definition of good service, used to measure and calculate the quality of the Service's performance with respect to a single aspect of service quality.
     */
    serviceLevelIndicator?: pulumi.Input<inputs.monitoring.v3.ServiceLevelIndicatorArgs>;
    /**
     * Optional. The ServiceLevelObjective id to use for this ServiceLevelObjective. If omitted, an id will be generated instead. Must match the pattern [a-z0-9\-]+
     */
    serviceLevelObjectiveId?: pulumi.Input<string>;
    /**
     * Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
     */
    userLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    v3Id: pulumi.Input<string>;
    v3Id1: pulumi.Input<string>;
}
