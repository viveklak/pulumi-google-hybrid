// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Fetches the representation of an existing ManagedZone.
 */
export function getManagedZone(args: GetManagedZoneArgs, opts?: pulumi.InvokeOptions): Promise<GetManagedZoneResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:dns/v2:getManagedZone", {
        "clientOperationId": args.clientOperationId,
        "location": args.location,
        "managedZone": args.managedZone,
        "project": args.project,
    }, opts);
}

export interface GetManagedZoneArgs {
    clientOperationId?: string;
    location: string;
    managedZone: string;
    project?: string;
}

export interface GetManagedZoneResult {
    readonly cloudLoggingConfig: outputs.dns.v2.ManagedZoneCloudLoggingConfigResponse;
    /**
     * The time that this resource was created on the server. This is in RFC3339 text format. Output only.
     */
    readonly creationTime: string;
    /**
     * A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
     */
    readonly description: string;
    /**
     * The DNS name of this managed zone, for instance "example.com.".
     */
    readonly dnsName: string;
    /**
     * DNSSEC configuration.
     */
    readonly dnssecConfig: outputs.dns.v2.ManagedZoneDnsSecConfigResponse;
    /**
     * The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field contains the set of destinations to forward to.
     */
    readonly forwardingConfig: outputs.dns.v2.ManagedZoneForwardingConfigResponse;
    readonly kind: string;
    /**
     * User labels.
     */
    readonly labels: {[key: string]: string};
    /**
     * User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
     */
    readonly name: string;
    /**
     * Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.
     */
    readonly nameServerSet: string;
    /**
     * Delegate your managed_zone to these virtual name servers; defined by the server (output only)
     */
    readonly nameServers: string[];
    /**
     * The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the network to peer with.
     */
    readonly peeringConfig: outputs.dns.v2.ManagedZonePeeringConfigResponse;
    /**
     * For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
     */
    readonly privateVisibilityConfig: outputs.dns.v2.ManagedZonePrivateVisibilityConfigResponse;
    /**
     * The presence of this field indicates that this is a managed reverse lookup zone and Cloud DNS resolves reverse lookup queries using automatically configured records for VPC resources. This only applies to networks listed under private_visibility_config.
     */
    readonly reverseLookupConfig: outputs.dns.v2.ManagedZoneReverseLookupConfigResponse;
    /**
     * This field links to the associated service directory namespace. Do not set this field for public zones or forwarding zones.
     */
    readonly serviceDirectoryConfig: outputs.dns.v2.ManagedZoneServiceDirectoryConfigResponse;
    /**
     * The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
     */
    readonly visibility: string;
}

export function getManagedZoneOutput(args: GetManagedZoneOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagedZoneResult> {
    return pulumi.output(args).apply(a => getManagedZone(a, opts))
}

export interface GetManagedZoneOutputArgs {
    clientOperationId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    managedZone: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
