// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Creates a new ResourceRecordSet.
 */
export class ResourceRecordSet extends pulumi.CustomResource {
    /**
     * Get an existing ResourceRecordSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ResourceRecordSet {
        return new ResourceRecordSet(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'google-hybrid:dns/v1:ResourceRecordSet';

    /**
     * Returns true if the given object is an instance of ResourceRecordSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceRecordSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceRecordSet.__pulumiType;
    }

    public readonly kind!: pulumi.Output<string>;
    /**
     * For example, www.example.com.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
     */
    public readonly routingPolicy!: pulumi.Output<outputs.dns.v1.RRSetRoutingPolicyResponse>;
    /**
     * As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
     */
    public readonly rrdatas!: pulumi.Output<string[]>;
    /**
     * As defined in RFC 4034 (section 3.2).
     */
    public readonly signatureRrdatas!: pulumi.Output<string[]>;
    /**
     * Number of seconds that this ResourceRecordSet can be cached by resolvers.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The identifier of a supported record type. See the list of Supported DNS record types.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ResourceRecordSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceRecordSetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.managedZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedZone'");
            }
            resourceInputs["clientOperationId"] = args ? args.clientOperationId : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["managedZone"] = args ? args.managedZone : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["routingPolicy"] = args ? args.routingPolicy : undefined;
            resourceInputs["rrdatas"] = args ? args.rrdatas : undefined;
            resourceInputs["signatureRrdatas"] = args ? args.signatureRrdatas : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        } else {
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["routingPolicy"] = undefined /*out*/;
            resourceInputs["rrdatas"] = undefined /*out*/;
            resourceInputs["signatureRrdatas"] = undefined /*out*/;
            resourceInputs["ttl"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceRecordSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ResourceRecordSet resource.
 */
export interface ResourceRecordSetArgs {
    /**
     * For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.
     */
    clientOperationId?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    managedZone: pulumi.Input<string>;
    /**
     * For example, www.example.com.
     */
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    /**
     * Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
     */
    routingPolicy?: pulumi.Input<inputs.dns.v1.RRSetRoutingPolicyArgs>;
    /**
     * As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
     */
    rrdatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * As defined in RFC 4034 (section 3.2).
     */
    signatureRrdatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of seconds that this ResourceRecordSet can be cached by resolvers.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The identifier of a supported record type. See the list of Supported DNS record types.
     */
    type?: pulumi.Input<string>;
}
