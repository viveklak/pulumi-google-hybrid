// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets metadata on a pending or completed Cloud Bigtable Backup.
 */
export function getBackup(args: GetBackupArgs, opts?: pulumi.InvokeOptions): Promise<GetBackupResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:bigtableadmin/v2:getBackup", {
        "backupId": args.backupId,
        "clusterId": args.clusterId,
        "instanceId": args.instanceId,
        "project": args.project,
    }, opts);
}

export interface GetBackupArgs {
    backupId: string;
    clusterId: string;
    instanceId: string;
    project?: string;
}

export interface GetBackupResult {
    /**
     * The encryption information for the backup.
     */
    readonly encryptionInfo: outputs.bigtableadmin.v2.EncryptionInfoResponse;
    /**
     * `end_time` is the time that the backup was finished. The row data in the backup will be no newer than this timestamp.
     */
    readonly endTime: string;
    /**
     * The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 30 days from the time the request is received. Once the `expire_time` has passed, Cloud Bigtable will delete the backup and free the resources used by the backup.
     */
    readonly expireTime: string;
    /**
     * A globally unique identifier for the backup which cannot be changed. Values are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/ backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and 50 characters in length. The backup is stored in the cluster identified by the prefix of the backup name of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     */
    readonly name: string;
    /**
     * Size of the backup in bytes.
     */
    readonly sizeBytes: string;
    /**
     * Immutable. Name of the table from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects/{project}/instances/{instance}/tables/{source_table}`.
     */
    readonly sourceTable: string;
    /**
     * `start_time` is the time that the backup was started (i.e. approximately the time the CreateBackup request is received). The row data in this backup will be no older than this timestamp.
     */
    readonly startTime: string;
    /**
     * The current state of the backup.
     */
    readonly state: string;
}

export function getBackupOutput(args: GetBackupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackupResult> {
    return pulumi.output(args).apply(a => getBackup(a, opts))
}

export interface GetBackupOutputArgs {
    backupId: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
