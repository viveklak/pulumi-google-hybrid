// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../../types";
import * as utilities from "../../utilities";

/**
 * Gets details of a single Instance.
 */
export function getInstance(args: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:memcache/v1beta2:getInstance", {
        "instanceId": args.instanceId,
        "location": args.location,
        "project": args.project,
    }, opts);
}

export interface GetInstanceArgs {
    instanceId: string;
    location: string;
    project?: string;
}

export interface GetInstanceResult {
    /**
     * The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.
     */
    readonly authorizedNetwork: string;
    /**
     * The time the instance was created.
     */
    readonly createTime: string;
    /**
     * Endpoint for the Discovery API.
     */
    readonly discoveryEndpoint: string;
    /**
     * User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
     */
    readonly displayName: string;
    /**
     * List of messages that describe the current state of the Memcached instance.
     */
    readonly instanceMessages: outputs.memcache.v1beta2.InstanceMessageResponse[];
    /**
     * Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     */
    readonly labels: {[key: string]: string};
    /**
     * The maintenance policy for the instance. If not provided, the maintenance event will be performed based on Memorystore internal rollout schedule.
     */
    readonly maintenancePolicy: outputs.memcache.v1beta2.GoogleCloudMemcacheV1beta2MaintenancePolicyResponse;
    /**
     * Published maintenance schedule.
     */
    readonly maintenanceSchedule: outputs.memcache.v1beta2.MaintenanceScheduleResponse;
    /**
     * The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
     */
    readonly memcacheFullVersion: string;
    /**
     * List of Memcached nodes. Refer to Node message for more details.
     */
    readonly memcacheNodes: outputs.memcache.v1beta2.NodeResponse[];
    /**
     * The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
     */
    readonly memcacheVersion: string;
    /**
     * Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
     */
    readonly name: string;
    /**
     * Configuration for Memcached nodes.
     */
    readonly nodeConfig: outputs.memcache.v1beta2.NodeConfigResponse;
    /**
     * Number of nodes in the Memcached instance.
     */
    readonly nodeCount: number;
    /**
     * User defined parameters to apply to the memcached process on each node.
     */
    readonly parameters: outputs.memcache.v1beta2.MemcacheParametersResponse;
    /**
     * The state of this Memcached instance.
     */
    readonly state: string;
    /**
     * Returns true if there is an update waiting to be applied
     */
    readonly updateAvailable: boolean;
    /**
     * The time the instance was updated.
     */
    readonly updateTime: string;
    /**
     * Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
     */
    readonly zones: string[];
}

export function getInstanceOutput(args: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply(a => getInstance(a, opts))
}

export interface GetInstanceOutputArgs {
    instanceId: pulumi.Input<string>;
    location: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
