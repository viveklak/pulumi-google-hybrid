// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Gets the specified DebugToken. For security reasons, the `token` field is never populated in the response.
 */
export function getDebugToken(args: GetDebugTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetDebugTokenResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("google-hybrid:firebaseappcheck/v1beta:getDebugToken", {
        "appId": args.appId,
        "debugTokenId": args.debugTokenId,
        "project": args.project,
    }, opts);
}

export interface GetDebugTokenArgs {
    appId: string;
    debugTokenId: string;
    project?: string;
}

export interface GetDebugTokenResult {
    /**
     * A human readable display name used to identify this debug token.
     */
    readonly displayName: string;
    /**
     * The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
     */
    readonly name: string;
    /**
     * Input only. Immutable. The secret token itself. Must be provided during creation, and must be a UUID4, case insensitive. This field is immutable once set, and cannot be provided during an UpdateDebugToken request. You can, however, delete this debug token using DeleteDebugToken to revoke it. For security reasons, this field will never be populated in any response.
     */
    readonly token: string;
}

export function getDebugTokenOutput(args: GetDebugTokenOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDebugTokenResult> {
    return pulumi.output(args).apply(a => getDebugToken(a, opts))
}

export interface GetDebugTokenOutputArgs {
    appId: pulumi.Input<string>;
    debugTokenId: pulumi.Input<string>;
    project?: pulumi.Input<string>;
}
